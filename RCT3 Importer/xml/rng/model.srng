<?xml version="1.0" encoding="UTF-8"?>

<grammar xmlns="http://relaxng.sourceforge.net/ns/shorthand" 
	xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" 
	xmlns:sch="http://purl.oclc.org/dsdl/schematron" 
	ns="http://rct3.sourceforge.net/rct3xml/model" 
	datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
	
	<sch:ns prefix="mod" uri="http://rct3.sourceforge.net/rct3xml/model"/>
	<sch:ns prefix="math" uri="http://exslt.org/math"/>
	<a:documentation>Shorthand RelaxNG + Schematron Schema to describe 3D models</a:documentation>
	<start>
		<element name="model">
			<sch:pattern>
				<sch:title>Name uniqueness</sch:title>
				<sch:rule context="/*/mod:mesh/@name">
					<sch:assert test="count(/*/mod:mesh[@name = current()]) = 1">The name of meshes have to be unique, '<sch:value-of select="."/>' is not.</sch:assert>
				</sch:rule>
				<sch:rule context="/*/mod:bone/@name">
					<sch:assert test="count(/*/mod:bone[@name = current()]) = 1">The name of bones have to be unique, '<sch:value-of select="."/>' is not.</sch:assert>
				</sch:rule>
				<sch:rule context="/*/mod:spline/@name">
					<sch:assert test="count(/*/mod:spline[@name = current()]) = 1">The name of splines have to be unique, '<sch:value-of select="."/>' is not.</sch:assert>
				</sch:rule>
				<sch:rule context="/*/mod:texture/@name">
					<sch:assert test="count(/*/mod:texture[@name = current()]) = 1">The name of textures have to be unique, '<sch:value-of select="."/>' is not.</sch:assert>
				</sch:rule>
				<sch:rule context="/*/mod:group/@name">
					<sch:assert test="count(/*/mod:group[@name = current()]) = 1">The name of groups have to be unique, '<sch:value-of select="."/>' is not.</sch:assert>
				</sch:rule>
			</sch:pattern>
			<element name="metadata" occurs="?">
				<group>
					<attribute name="role">
						<value>rct3</value>
					</attribute>
					<element name="name" occurs="?" type="string"/>
					<element name="prefix" occurs="?" type="string"/>
					<element name="path" occurs="?" type="string"/>
					<element name="version" occurs="?">
						<choice>
							<value>0</value>
							<value>1</value>
							<value>2</value>
						</choice>
					</element>
					<element name="flag" occurs="*">
						<choice>
							<value>greenery</value>
							<value>noshadow</value>
							<value>rotation</value>
							<value>unk01</value>
							<value>unk02</value>
							<value>unk03</value>
							<value>transformedPreview</value>
							<value>unkFerris</value>
						</choice>
					</element>
					<element name="sway" type="float" occurs="?"/>
					<element name="brightness" type="float" occurs="?"/>
					<element name="scale" type="float" occurs="?"/>
					<element name="unk" type="float" occurs="?"/>
				</group>
			</element>
			<a:documentation>The 'system' element describes the coordinate system used for the model</a:documentation>
			<element name="system" occurs="?">
				<attribute name="handedness">
					<choice>
						<value>left</value>
						<value>right</value>
					</choice>
				</attribute>
				<a:documentation>The 'up' attribute defines which axis points up in the used coordinate system</a:documentation>
				<attribute name="up">
					<choice>
						<value>x</value>
						<value>y</value>
						<value>z</value>
					</choice>
				</attribute>
			</element>
			<choice occurs="+">
				<element name="mesh">
					<sch:pattern>
						<sch:title>Check texture</sch:title>
						<sch:rule context="mod:mesh/@texture">
							<sch:assert test="//mod:texture[@name = current()]">Texture '<sch:value-of select="."/>' of mesh '<sch:value-of select="ancestor-or-self::mod:mesh/@name"/>' is undefined.</sch:assert>
						</sch:rule>
					</sch:pattern>
					<attribute name="name" type="string"/>
					<attribute name="texture" type="string" occurs="?"/>
					<element name="metadata" occurs="*">
						<choice>
							<group>
								<attribute name="role">
									<value>rct3</value>
								</attribute>
								<element name="doubleSided" occurs="?">
									<empty/>
								</element>
								<element name="textureStyle" type="string" occurs="?"/>
								<element name="flags" occurs="?">
									<choice>
										<value>terrain</value>
										<value>cliff</value>
										<value>water</value>
										<value>watermask</value>
										<value>billboard</value>
										<value>animatedbillboard</value>
									</choice>
								</element>
								<element name="fudgeNormals" occurs="?">
									<choice>
										<value>+X</value>
										<value>+Y</value>
										<value>+Z</value>
										<value>-X</value>
										<value>-Y</value>
										<value>-Z</value>
										<value>rim</value>
									</choice>
								</element>
							</group>
							<group>
								<attribute name="role"/>
								<anyAttribute/>
								<anyElement/>
							</group>
						</choice>
					</element>
					<sch:pattern>
						<sch:title>Check Bones</sch:title>
						<sch:rule context="mod:vertex/mod:bone[last()]">
							<sch:assert test="sum(../mod:bone/@weight) = 100">Bone weights of vertex #<sch:value-of select="count(ancestor::mod:vertex/preceding-sibling::mod:vertex)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' do not add up to 100.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:vertex/mod:bone/@name">
							<sch:assert test="/*/mod:bone[@name = current()]" role="warning">Bone '<sch:value-of select="."/>' of vertex #<sch:value-of select="count(ancestor::mod:vertex/preceding-sibling::mod:vertex)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' is not defined.</sch:assert>
							<sch:assert test="count(ancestor::mod:vertex/mod:bone[@name = current()]) = 1">Bone '<sch:value-of select="."/>' of vertex #<sch:value-of select="count(ancestor::mod:vertex/preceding-sibling::mod:vertex)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' repeated.</sch:assert>
						</sch:rule>
					</sch:pattern>
					<choice>
						<element name="vertex" occurs="+" ref="vertexcontent"/>
						<element name="vertex" occurs="+">
							<attribute name="index" type="unsignedInt"/>
							<ref name="vertexcontent" />
						</element>
					</choice>
					<element name="triangle" occurs="+">
						<sch:pattern>
							<sch:title>Triangle indices</sch:title>
							<sch:rule context="mod:triangle">
								<sch:assert test="@a &lt; count(ancestor::mod:mesh/mod:vertex)">Index 'a' of triangle #<sch:value-of select="count(ancestor::mod:triangle/preceding-sibling::mod:triangle)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' is too big.</sch:assert>
								<sch:assert test="@b &lt; count(ancestor::mod:mesh/mod:vertex)">Index 'b' of triangle #<sch:value-of select="count(ancestor::mod:triangle/preceding-sibling::mod:triangle)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' is too big.</sch:assert>
								<sch:assert test="@c &lt; count(ancestor::mod:mesh/mod:vertex)">Index 'c' of triangle #<sch:value-of select="count(ancestor::mod:triangle/preceding-sibling::mod:triangle)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' is too big.</sch:assert>
								<sch:assert test="(@a != @b) and (@b != @c) and (@a != @c)">Some of the indices of triangle #<sch:value-of select="count(ancestor::mod:triangle/preceding-sibling::mod:triangle)+1"/> in mesh '<sch:value-of select="ancestor::mod:mesh/@name"/>' are identical.</sch:assert>
							</sch:rule>
						</sch:pattern>
						<attribute name="a" type="unsignedInt"/>
						<attribute name="b" type="unsignedInt"/>
						<attribute name="c" type="unsignedInt"/>
					</element>
				</element>
				<element name="bone">
					<sch:pattern>
						<sch:title>Check parent</sch:title>
						<sch:rule context="/*/mod:bone/@parent">
							<sch:assert test="/*/mod:bone[@name = current()]">Parent '<sch:value-of select="."/>' of bone '<sch:value-of select="ancestor-or-self::mod:bone/@name"/>' is undefined.</sch:assert>
							<sch:assert test="current() != ancestor-or-self::mod:bone/@name">Bone '<sch:value-of select="."/>' cannot be its own parent.</sch:assert>
						</sch:rule>
					</sch:pattern>
					<attribute name="name" type="string"/>
					<attribute name="parent" type="string" occurs="?"/>
					<a:documentation>The value of the 'role' attribute is arbitrary. It may describe a (recommended) use for the bone.
					If this attribute is missing or set to 'bone', it is usually assumed that a real mesh-transforming bone is described (In contrast
					to e.g. effect points).</a:documentation>
					<attribute name="role" type="string" occurs="?"/>
					<element name="matrix">
						<ref name="matrixrow" minOccurs="4" maxOccurs="4"/>
					</element>
				</element>
				<a:documentation>The 'spline' element describes a BÃ©zier curve or circle.
				Control points are defined with absolute coordinates.</a:documentation>
				<element name="spline">
					<attribute name="name" type="string"/>
					<attribute name="cyclic" occurs="?">
						<choice>
							<value type="int">0</value>
							<value type="int">1</value>
						</choice>
					</attribute>
					<element name="node" occurs="+">
						<element name="position" ref="vector"/>
						<element name="controlPrev" ref="vector"/>
						<element name="controlNext" ref="vector"/>
					</element>
				</element>
				<a:documentation>The 'texture' element is currently only a simple hint to what texture file should be assigned
				to a mesh. This may change in the future.</a:documentation>
				<element name="texture">
					<sch:pattern>
						<sch:title>Check texture</sch:title>
						<sch:rule context="mod:texture/@name">
							<sch:assert test="//mod:mesh[@texture = current()]" role="warning">Texture '<sch:value-of select="."/>' unused.</sch:assert>
						</sch:rule>
					</sch:pattern>
					<attribute name="name" type="string"/>
					<element name="metadata" occurs="?">
						<group>
							<attribute name="role">
								<value>rct3</value>
							</attribute>
							<element name="useAlpha" occurs="?">
								<empty/>
							</element>
							<element name="recol" type="int" occurs="?"/>
							<element name="referenced" occurs="?">
								<choice>
									<empty/>
									<data type="string"/>
								</choice>
							</element>
						</group>
					</element>
					<choice>
						<group>
							<attribute name="file" type="string"/>
							<attribute name="alphaFile" occurs="?" type="string"/>
						</group>
						<group>
							<attribute name="fps" type="unsignedInt"/>
							<choice>
								<element name="frame" occurs="+">
									<attribute name="file" type="string"/>
									<attribute name="alphaFile" occurs="?" type="string"/>
								</element>
								<element name="frame" occurs="+">
									<attribute name="index" type="unsignedInt"/>
									<attribute name="file" type="string"/>
									<attribute name="alphaFile" occurs="?" type="string"/>
								</element>
							</choice>
							<element name="sequence" occurs="+" type="unsignedInt"/>
						</group>
					</choice>
				</element>
				<a:documentation>'animation' elements define simple keyframe based animations. They are relative to a bone's parent. The rotation
				order is currently not defined, but will in all likelyhood be xyz.</a:documentation>
				<element name="animation">
					<sch:pattern>
						<sch:title>Check animation</sch:title>
						<sch:rule context="mod:animation">
							<sch:let name="trans" value="count(mod:bone/mod:translate[last() and @time='max'])" />
							<sch:let name="transall" value="count(mod:bone/mod:translate[last()])" />
							<sch:let name="rot" value="count(mod:bone/mod:rotate[last() and @time='max'])" />
							<sch:let name="rotall" value="count(mod:bone/mod:rotate[last()])" />
							<sch:assert test="((@abstract='true') or (@abstract='1')) or ($transall &gt; $trans) or ($rotall &gt; $rot)">Non-abstract animation '<sch:value-of select="@name"/>' must not have all last keyframes set to 'max'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:animation/@inherit">
							<sch:assert test="/*/mod:animation[@name = current()]">Animation '<sch:value-of select="ancestor::mod:animation/@name"/>' tries to inherit from undefined animation '<sch:value-of select="."/>'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone">
							<!--
							<sch:assert test="(count(mod:translate) &gt;= 2) or (count(mod:rotate) &gt;= 2)">Bone '<sch:value-of select="./@name"/>' of animation '<sch:value-of select="ancestor::mod:animation/@name"/>' needs at least two keyframes of the same type.</sch:assert>
							-->
							<sch:assert test="not(mod:translate) or not(mod:rotate) or (*[@time = 'max']) or (math:max(mod:translate/@time) = math:max(mod:rotate/@time))" role="warning">The end times of translation and rotation frames in bone '<sch:value-of select="./@name"/>' of animation '<sch:value-of select="ancestor::mod:animation/@name"/>' do not match.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone/@name">
							<sch:assert test="ancestor::mod:animation[@inherit] or ancestor::mod:animation[@abstract='true'] or ancestor::mod:animation[@abstract='1'] or (/*/mod:bone[@name = current()])" role="warning">Bone '<sch:value-of select="."/>' of animation '<sch:value-of select="ancestor::mod:animation/@name"/>' is undefined.</sch:assert>
							<sch:assert test="count(ancestor::mod:animation/mod:bone[@name = current()]) = 1">Bones may only be animated once within the same animation. Bone '<sch:value-of select="."/>' is animated multiple times in animation '<sch:value-of select="ancestor::mod:animation/@name"/>'.</sch:assert>
						</sch:rule>
						<!--
						<sch:rule abstract="true" id="txyz.element">
							<sch:let name="nodename" value="name()" />
							<sch:assert test="count(ancestor::mod:bone/*[name() = $nodename]) != 1">Bone '<sch:value-of select="ancestor::mod:bone/@name"/>' of animation '<sch:value-of select="ancestor::mod:animation/@name"/>' has only one keyframe of a type '<sch:value-of select="$nodename"/>'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone/mod:rotate">
							<sch:extends rule="txyz.element"/>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone/mod:translate">
							<sch:extends rule="txyz.element"/>
						</sch:rule>
						-->
						<sch:rule abstract="true" id="txyz.time">
							<sch:let name="nodename" value="name(ancestor::*[1])" />
							<sch:assert test="(count(ancestor::*[1]/preceding-sibling::*[name() = $nodename])=0) or (current() = 'max') or (current() &gt; preceding::*[name() = $nodename]/@time)">Keyframe '<sch:value-of select="$nodename"/>' #<sch:value-of select="count(ancestor::*[1]/preceding-sibling::*[name() = $nodename])+1"/> of bone '<sch:value-of select="ancestor::mod:bone/@name"/>' in animation '<sch:value-of select="ancestor::mod:animation/@name"/>' has out-of-order time.</sch:assert>
							<sch:assert test="(count(ancestor::*[1]/preceding-sibling::*[name() = $nodename]) &gt; 0) or (current() = 0)" role="warning">The first '<sch:value-of select="$nodename"/>' keyframe of bone '<sch:value-of select="ancestor::mod:bone/@name"/>' in animation '<sch:value-of select="ancestor::mod:animation/@name"/>' needs to be at the start (time="0").</sch:assert>
							<sch:assert test="(count(ancestor::*[1]/following-sibling::*[name() = $nodename])=0) or (current() != 'max')">Only the last '<sch:value-of select="$nodename"/>' keyframe of bone '<sch:value-of select="ancestor::mod:bone/@name"/>' in animation '<sch:value-of select="ancestor::mod:animation/@name"/>' may have time='max'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone/mod:rotate/@time">
							<sch:extends rule="txyz.time"/>
						</sch:rule>
						<sch:rule context="mod:animation/mod:bone/mod:translate/@time">
							<sch:extends rule="txyz.time"/>
						</sch:rule>
					</sch:pattern>
					<attribute name="name" type="string"/>
					<a:documentation>The optional 'inherit' attribute allows an animation to copy animated bones from a 'parent' animation.
					Definitions inside supercede definitions in the parent. Also times set to 'max' are interpreted within the context of
					this animation (= the maximum time of the defined oanimation is also applied to frames with time='max' inherited form the
					parent).</a:documentation>
					<attribute name="inherit" occurs="?" type="string"/>
					<attribute name="abstract" occurs="?" type="boolean"/>
					<element name="bone" occurs="+">
						<attribute name="name" type="string"/>
						<element name="translate" occurs="*" ref="timevector"/>
						<choice>
                            <group>
                                <attribute name="rotationformat" occurs="?">
                                    <value>euler</value>
                                </attribute>
                                <element name="rotate" occurs="*" ref="timevector"/>
                            </group>
                            <group>
                                <attribute name="rotationformat">
                                    <choice>
                                        <value>axis</value>
                                        <value>quaternion</value>
                                    </choice>
                                </attribute>
                                <element name="rotate" occurs="*">
                                    <ref name="timevector"/>
                                    <attribute name="w" type="decimal"/>
                                </element>
                            </group>
                        </choice>
					</element>
				</element>
				<a:documentation>The group element groups together meshes, bones and animations for various purposes.</a:documentation>
				<element name="group">
					<sch:pattern>
						<sch:title>Check group</sch:title>
						<sch:rule context="mod:group/mod:mesh">
							<sch:assert test="/*/mod:mesh[@name = current()]">Mesh '<sch:value-of select="."/>' of group '<sch:value-of select="ancestor::mod:group/@name"/>' is undefined.</sch:assert>
							<sch:assert test="count(ancestor::mod:group/mod:mesh[. = current()]) = 1">Meshes may only be assigned once to a group. Mesh '<sch:value-of select="."/>' is assigned multiple times to group '<sch:value-of select="ancestor::mod:group/@name"/>'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:group/mod:bone">
							<sch:assert test="/*/mod:bone[@name = current()]">Bone '<sch:value-of select="."/>' of group '<sch:value-of select="ancestor::mod:group/@name"/>' is undefined.</sch:assert>
							<sch:assert test="count(ancestor::mod:group/mod:bone[. = current()]) = 1">Bones may only be assigned once to a group. Bone '<sch:value-of select="."/>' is assigned multiple times to group '<sch:value-of select="ancestor::mod:group/@name"/>'.</sch:assert>
						</sch:rule>
						<sch:rule context="mod:group/mod:animation">
							<sch:assert test="/*/mod:animation[@name = current()]" role="warning">Animation '<sch:value-of select="."/>' of group '<sch:value-of select="ancestor::mod:group/@name"/>' is undefined.</sch:assert>
							<sch:assert test="count(ancestor::mod:group/mod:animation[. = current()]) = 1">Animations may only be assigned once to a group. Animation '<sch:value-of select="."/>' is assigned multiple times to group '<sch:value-of select="ancestor::mod:group/@name"/>'.</sch:assert>
						</sch:rule>
					</sch:pattern>
					<attribute name="name" type="string"/>
					<a:documentation>'metadata' elements represent information specific for a reading application. As the need arises,
					'metadata' elments will be added to other elemens beside 'group'.</a:documentation>
					<element name="metadata" occurs="?">
						<group>
							<attribute name="role">
								<value>rct3</value>
							</attribute>
							<element name="lodDistance" occurs="?">
								<data type="decimal">
									<param name="minInclusive">0</param>
								</data>
							</element>
						</group>
					</element>
					<choice occurs="+">
						<element name="bone" type="string"/>
						<element name="mesh" type="string"/>
						<element name="animation" type="string"/>
					</choice>
				</element>
			</choice>
		</element>
	</start>
	<define name="vertexcontent">
		<element name="position" ref="vector"/>
		<element name="normal" ref="vector"/>
		<element name="uv">
			<attribute name="u" type="decimal"/>
			<attribute name="v" type="decimal"/>
		</element>
		<a:documentation>Up to four bones can infulence a vertex. The weight has to add up to 100 (%)</a:documentation>
		<ref name="bone" minOccurs="0" maxOccurs="4"/>
	</define>
	<define name="vector">
		<attribute name="x" type="decimal"/>
		<attribute name="y" type="decimal"/>
		<attribute name="z" type="decimal"/>
	</define>
	<define name="timevector">
		<ref name="vector"/>
		<a:documentation>The 'time' attribute can be set to 'max'. This will be replaced by the maximal numeric time within an
		'animation' element. Therefore an 'animation' element must at least have one last keyframe with a numeric time value (validated
		via a Schematron ruleu).</a:documentation>
		<attribute name="time">
			<choice>
				<data type="decimal"/>
				<value>max</value>
			</choice>
		</attribute>
	</define>
	<define name="bone">
		<element name="bone">
			<attribute name="name" type="string"/>
			<attribute name="weight" type="decimal"/>
		</element>
	</define>
	<define name="matrixrow">
		<element name="row">
			<list>
				<data type="decimal"/>
				<data type="decimal"/>
				<data type="decimal"/>
				<data type="decimal"/>
			</list>
		</element>
	</define>
</grammar>
