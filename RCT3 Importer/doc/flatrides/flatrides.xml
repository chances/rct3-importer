<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <title>Creating Flat Rides</title>
  <articleinfo>
    <date>24.6.2008</date>
    <author>
      <surname>Belgabor</surname>
    </author>
    <legalnotice>
      <para>Copyright (C) 2008 Belgabor, some rights reserved.</para>
      <para>This work is licensed under a <ulink
      url="http://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons
      Attribution-NonCommercial-NoDerivs 3.0 License</ulink>.</para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>
        <date>24.6.2008</date>
        <author>
          <surname>Belgabor</surname>
        </author>
        <revdescription>
          <para>Initial revision</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>1.1</revnumber>
        <date>23.7.2008</date>
        <author>
          <surname>Belgabor</surname>
        </author>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added license</para>
            </listitem>
            <listitem>
              <para>XML markup for listings (setting language to XML)</para>
            </listitem>
            <listitem>
              <para>More info about rideOption type 12</para>
            </listitem>
            <listitem>
              <para>Note about mech spline being not strictly
              necessary.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
  </articleinfo>
  <section>
    <title>Introduction</title>
    <para>Before we start:</para>
    <warning>
      <para>This tutorial is not for beginners, it requires sound knowledge of
      modelling, creating CS and animating. I will <emphasis>not</emphasis>
      explain that here! Also you need to do a lot of experimentation
      yourself, I'll only answer questions about tools I created, not about
      other apps.</para>
    </warning>
    <para>What you'll need:</para>
    <itemizedlist>
      <listitem>
        <para>As personal assets you need computer savvyness, patience and fun
        experimentating. A high frustration tolerance also doesn't
        hurt.</para>
      </listitem>
      <listitem>
        <para>A modeller that is able to produce animation and knowledge how
        to do that or a lot of patience to animate by hand. For now I suggest
        Blender and this tutorial will focus on that.</para>
      </listitem>
      <listitem>
        <para>A way to create splines. Basically the same reasoning as
        animations. I also recommend Blender for that.</para>
      </listitem>
      <listitem>
        <para>Recent beta versions of the importer and
        <application>ovlmake</application>.</para>
      </listitem>
      <listitem>
        <para>Recommended, but not necessary, is a good XML editor. Try
        <application>XML Copy Editor</application>.</para>
      </listitem>
    </itemizedlist>
    <para>To finish the introduction, a brief overview of what you need to
    do:</para>
    <itemizedlist>
      <listitem>
        <para>Create the model</para>
      </listitem>
      <listitem>
        <para>Animate it. You'll need four separate animations. This includes
        creation of the bone skeleton and effect bones.</para>
      </listitem>
      <listitem>
        <para>Create at least three splines</para>
      </listitem>
      <listitem>
        <para>Assemble the above in the importer</para>
      </listitem>
      <listitem>
        <para>Write an XML file for <application>ovlmake</application> and
        create the ride with it</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Creating the model</title>
    <para>Create your model as you would for custom scenery. Things you need
    to keep in mind are:</para>
    <itemizedlist>
      <listitem>
        <para>Things that need to be animated need to be in separate meshes.
        That's not a limitation of RCT3, but of the current tool chain.
        Unfortunately there is no easy way to fix that, so you'll have to live
        with it.</para>
      </listitem>
      <listitem>
        <para>Rides usually have a higher polygon count, so if you have
        1000-3000, you're well within the limits of the rides RCT3 has. But if
        you go that high, you need to provide LODs, otherwise your ride will
        disappear quite fast.</para>
      </listitem>
      <listitem>
        <para>Model your ride in rest (not running) state. For most things
        that's somewhat obvious, but I'm personally tempted to model
        restraints in closed state, if you're as well, resist that temptation!
        Restraints need to be in open/released state.</para>
        <para>Also make sure to center your ride around the origin.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Animating the model</title>
    <para>As written in the introduction, you'll need to create four
    animations.</para>
    <orderedlist>
      <listitem>
        <para>The rest animation. This is pretty trivial. As you know, bones
        need to be <quote>animated</quote> to their positions, and this is the
        animation that does it as long as the ride does not run. This
        animation also seems to run a full cycle after the last peep got to
        it's seat, so in most cases to speed things up, make this only one
        frame, that's enough. There are also rides in RCT3 where this
        <quote>really</quote> animates some parts of the ride, but in my hands
        that didn't work. I'm not sure what needs to be done to make it work,
        maybe only parts not bearing peep effect points can be animated, I
        don't know.</para>
      </listitem>
      <listitem>
        <para>The start up animation. This brings the ride up to run. It
        consists of everything before the part that will be repeated if the
        user selects multiple circuits. Things usually done here are closing
        the restraints, pulling things up and speeding up rotations (you can
        see that in action in exactly this order on my Jumpin' Jack
        ride).</para>
      </listitem>
      <listitem>
        <para>The loop animation. The main animation. This part is repeated if
        the user selects multiple circuits.</para>
      </listitem>
      <listitem>
        <para>The stop animation. The logic inverse to the start up animation,
        <abbrev>i.e.</abbrev> slow down, return to the rest position and open
        the restraints.</para>
      </listitem>
    </orderedlist>
    <section>
      <title>A few general notes about effect bones</title>
      <para>In animated CS (and flat rides are in fact pretty much only an
      advanced form of animated CS), effect points are identical to bones, so
      I will call them effect bones. It is usually not recommended to have
      meshes moved by effect bones. I've seen it work and not work, so better
      take no chances.</para>
      <important>
        <para>In contrast to most of the effect points used in CS, for all
        I'll mention here not only position but also orientation
        matters!</para>
      </important>
      <para>There's four effect point types I want to mention here. Lights
      also work, but I won't go into detail about them. All of the following
      use a running number symbolized by <quote>XX</quote>.</para>
      <itemizedlist>
        <listitem>
          <para>peepXX. Mandatory. These represent the peeps on the ride and
          the number (somewhat obviously) determines the ride's capacity. I so
          far only used sitting positions, and they differ from benches. The
          point is somewhat more intuitive and needs to be approximately at
          the end of the peeps bottom (butt). I don't know where they have to
          be for standing positions.</para>
        </listitem>
        <listitem>
          <para>inspectionpointXX. Mandatory. The mechanic will walk there to
          inspect and repair the ride. So far I've only seen one
          (inspectionpoint01).</para>
        </listitem>
        <listitem>
          <para>cameraXX. On-ride camera, peep category.</para>
        </listitem>
        <listitem>
          <para>staticXX. On-ride camera, static category. Despite the name,
          these can be animated as well.</para>
        </listitem>
      </itemizedlist>
      <para>I'll explain how to properly set up orientation in Blender below.
      If you do it in a other way, you're on your own.</para>
    </section>
    <section>
      <title>Animating in Blender</title>
      <para>Blender offers a plethora of possibilities to animate. My script
      only supports 2/3 of one, but as you'll see, that's enough =)</para>
      <para>To easily support transferral of animated models (and splines)
      from Blender to the Importer/ovlmake I've designed a special model file
      format and provided an export script for this format. All further
      explanations regarding Blender require you to use this script and
      format. In the script directory you'll find a readme explaining the
      script options and some general notes as well as an explanation of the
      second script I'll mention later. Now would be a good time to read this
      readme. I'll repeat the most important information, but read it
      nevertheless.</para>
      <important>
        <para>The export script ignores all things whose names start with a
        <quote>_</quote> (underscore). You can use this for helper objects and
        bones needed for the animation, taking pictures or recording a movie
        of your ride in Blender to ensure they don't accidentally get
        exported.</para>
      </important>
      <para>RCT3-compatible animation in Blender is done by using an armature
      and recording Loc (Translation) and Quat (Rotation) IPOs for poses in
      Pose Actions. Always make sure you record all channels of a certain IPO
      type (XYZ for Loc and QXYZ for Quat). Other types of animation (mostly
      object animation and Scale IPOs for poses) are not supported. The
      Blender entity that is exported as an animation is an Action. There is a
      way to use the NLA, more on that later.</para>
      <warning>
        <para>The export script is not very error/crap tolerant (or rather not
        at all). If you get an error make sure you have no</para>
        <itemizedlist>
          <listitem>
            <para>Meshes that are not UV-mapped</para>
          </listitem>
          <listitem>
            <para>Actions or anything with an empty name</para>
          </listitem>
          <listitem>
            <para>Actions without keyframes</para>
          </listitem>
        </itemizedlist>
      </warning>
      <note>
        <para>Deleting actions in Blender is unfortunately very cumbersome, so
        I'll explain it to you.</para>
        <orderedlist>
          <listitem>
            <para>Open an action window</para>
          </listitem>
          <listitem>
            <para>Select the action you want to delete</para>
          </listitem>
          <listitem>
            <para>Deactivate the <guibutton>F</guibutton>-button next to the
            action name</para>
          </listitem>
          <listitem>
            <para>Select a different action you do <emphasis>not</emphasis>
            want to delete.</para>
          </listitem>
          <listitem>
            <para>Check the action drop list and make sure that there is a
            small circle left to the action you want to delete (just look, do
            not select it!). This circle means the action is not used anymore
            and therefore will not be saved.</para>
          </listitem>
          <listitem>
            <para>Save the blend file</para>
          </listitem>
          <listitem>
            <para>Reload the blend file</para>
          </listitem>
        </orderedlist>
        <para>The reason for this is the way Blender manages data. Blender
        does not delete data when you delete it somewhere, it is just not used
        by anything (<quote>unlinked</quote>). Blender discards unlinked
        things during saving, but only in the saved file. So to get rid of
        these things, you need to save and reload. Actions are special because
        of the <acronym>NLA</acronym> and some other things you may want to
        do, unlinked actions are somewhat normal. Therefore Blender by default
        sets the fake user property on them. This means they are always
        considered used/linked, even if no real using object exists. This
        property is manipulated with the
        <guibutton>F</guibutton>-button.</para>
      </note>
      <section>
        <title>Creating the Armature</title>
        <para>Create the armature as described in lots of Blender animation
        tutorials.</para>
        <important>
          <para>After adding the armature, <emphasis>immediately</emphasis>
          make sure it's origin is 0,0,0 and that rotation and scale is
          applied to object data. <emphasis>Never</emphasis> transform your
          armature object! <emphasis role="bold">This is the absolutely most
          important thing to do! Otherwise you'll run into a lot of problems
          later!</emphasis></para>
          <para><emphasis role="bold">Only ever use one Armature
          object</emphasis> in a blend file. More will usually lead to
          errors.</para>
        </important>
        <para>Now start to add bones. Make sure the rest pose (the one you see
        in edit mode) is also the rest pose of your ride! You can use bone
        constraints, but you need to keep some caveats in mind, see
        below.</para>
      </section>
      <section>
        <title>Effect bones</title>
        <para>Unfortunately there is no easy way to show a bone's coordinate
        system in Blender (at least none I found). Therefore there is an
        alternate way to create effect bones in a more convenient and (imo)
        intuitive way. Three types of Blender objects will be exported as
        bones:</para>
        <orderedlist>
          <listitem>
            <para>Empties. An Empty is a catch-all effect bone marker. There
            is a special mode mostly for peep bones. Normally peeps would look
            in -X direction of the Empty. I found that a bit unintuitive, so
            if you set the Empties display size to less than 0.6 (I normally
            use 0.5), it will be exported as if rotated 180°, so just point
            the X-Axis the way the peep should look. The same is necessary if
            you want to use the Empty as a camera, but there's a better
            way.</para>
          </listitem>
          <listitem>
            <para>Cameras. A camera can be used like an Empty, but it is
            transformed in a way that if used for an on-ride camera, it will
            look in the correct direction (not quite trivial, as untransformed
            Cameras look down in Blender). You need to name the camera
            properly though, as the name is taken as is (e.g.
            <quote>static01</quote>). If you set the lens value of the camera
            to 15.5, you'll have approximately the same view through the
            camera in Blender as in RCT3.</para>
          </listitem>
          <listitem>
            <para>Lamps. A lamp lamp will be exported as a light effect bone.
            There are basically three modes.</para>
            <itemizedlist>
              <listitem>
                <para>Full automatic mode. I will not discuss that here as it
                doesn't work reliably in connection with armature based
                animation.</para>
              </listitem>
              <listitem>
                <para>Half-automatic mode. The recommended way. You need to
                name your Lamp lightstartXX_ (note the underscore!). XX is the
                running number of your light effect bones. The exact light
                effect bone type is determined from the Lamp's settings. The
                <guibutton>Ray Shadow</guibutton> button determines whether
                the light shines (activated) or not (not activated). The
                <guibutton>OnlyShadow</guibutton> button determines whether
                the bulb is shown (not activated) or not (activated). So
                combinations of these two select lightstart, nblightstart and
                simplelightstart. <guibutton>Ray Shadow</guibutton> off and
                <guibutton>OnlyShadow</guibutton> on would mean a non-shining
                light without a bulb and is not supported. The lamps distance
                value is taken as the radius (0.5 will give 50cm). Normally,
                the lights colour is taken form the Lamps colour. If you want
                to have a recolourable light, activate the
                <guibutton>Sphere</guibutton> button. The Energy value will
                then determine which colour option will be taken (rounded to
                full value: &lt;=1: first, 2: second, &gt;=3 third).</para>
                <note>
                  <para>To keep those from interfering with lighting set up
                  for rendering in Blender, put your Lamps for light effect
                  bones on a separate layer and activate the
                  <guibutton>Layer</guibutton> button for them.</para>
                </note>
              </listitem>
              <listitem>
                <para>Manual mode: just name your Lamps as you would in the
                importer. Refer to the script readme if Blenders name lengh
                limit kicks in, but make sure the Object name doesn't end with
                an underscore in that case!</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>Digression: bone constraints</title>
        <para>Bone constraints are tremendously useful in some cases, but you
        need to keep a few caveats in mind.</para>
        <itemizedlist>
          <listitem>
            <para>Never record keyframes on bones affected by bone
            constraints, Blender does not do that correctly. As soon as you
            use bone constraints, you need to bake your actions (See the
            script readme).</para>
          </listitem>
          <listitem>
            <para>This also affects your rest state! You need to manually edit
            your bones into their constrained states in rest state. So if your
            pose is in rest state, no bones may move when you switch in and
            out of edit mode.</para>
          </listitem>
          <listitem>
            <para>The TrackTo constraint is one of the most useful ones, but
            may need special attention to work flawlessly. For the helper
            bones you might need, remember to start their names with an
            underscore so they don't get exported.</para>
            <orderedlist>
              <listitem>
                <para>Do not track objects whose position or orientation is
                influenced by constraints on other bones. If you need to do
                that, place a helper bone there and track that.</para>
              </listitem>
              <listitem>
                <para>Do not have two bones track each-other. Make one track
                the other and place a helper bone at the first ones position
                and have the other bone track that (if you wonder why you may
                want to do that, think pneumatic pistons).</para>
              </listitem>
              <listitem>
                <para>In general it's less error-prone to generally track only
                bones.</para>
              </listitem>
            </orderedlist>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Assigning objects to your Armature</title>
        <para>The easiest and least error-prone way to assign your objects (be
        they meshes or other objects for effect bones) to your Armature is to
        use bone parenting. Put the Armature in pose mode, then first select
        the object you want to assign and Shift-select the bone you want to
        assign it to. Then press <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>P</keycap>
          </keycombo> and select <guimenuitem>Bone</guimenuitem>.</para>
      </section>
      <section>
        <title>Animating</title>
        <para>First I would suggest you to record all bones for your rest
        animation in rest state. I also suggest to switch Blender to 30 frames
        per second, that's what RCT3 uses. You need to keep in mind that
        RCT3's animations are time based and start from zero. Blender uses
        frames and starts at frame 1. So if you want to have a keyframe after
        1 second in RCT3, you need to place it on frame 31.</para>
        <para>Then you have two options.</para>
        <section>
          <title>Make separate actions <quote>by hand</quote></title>
          <para>Record start up, loop and stop animations as separate actions.
          I'd suggest to always record LocRot frames. The start up action
          should start with a keyframe in rest state. The loop actions should
          start with the identical pose keyframe that the start up action ends
          with and return to that pose with the last keyframe. The stop action
          starts again with that pose and returns to the rest pose.</para>
        </section>
        <section>
          <title>Use the <acronym>NLA</acronym></title>
          <para>Create a couple of micro-actions for move patterns of your
          ride (remember to start their names with an underscore) and assemble
          the full program in the <acronym>NLA</acronym>. For these
          micro-actions I suggest only recording what you really need
          (Loc/Rot/LocRot) so they mix flawlessly. Use frame markers to mark
          the first frame of the start up part (usually that will be frame 1),
          the loop part and the stop part. Give those markers names (e.g.
          <quote>start</quote>, <quote>loop</quote> and <quote>stop</quote>).
          Then use my Bake <acronym>NLA</acronym> to Action script to create
          actions from these parts (don't forget to activate <guibutton>Auto
          Split</guibutton>). The script can be found in the Animation menu of
          a script window.</para>
        </section>
      </section>
      <section>
        <title>Export</title>
        <para>Export options are explained in the readme, make sure you
        understand them. If you use grouping, don't forget to include your
        armature in all groups. Use one group per LOD. But before you actually
        export, you should create the required splines.</para>
        <important>
          <para>Make sure your object/armature is in rest state when
          exporting!</para>
        </important>
      </section>
    </section>
  </section>
  <section>
    <title>Creating splines</title>
    <para>A flat ride requires at least three splines. RCT3 splines are cubic
    bézier curves, that means each spline node has two control points that
    affect the curve shape. They mark paths for peeps to follow. We
    need:</para>
    <orderedlist>
      <listitem>
        <para>A circular loop spline. This defines a round course around the
        perimeter of the ride. It is used by the peeps to travel from the
        entrance to the seat splines and back from the seat splines to the
        exit. The same holds true for the mechanic and the mechanic
        spline.</para>
      </listitem>
      <listitem>
        <para>One or more seat splines. Those are used by the peeps to travel
        from the loop spline to their effect bones and back.</para>
      </listitem>
      <listitem>
        <para>A mechanic spline. Used by the mechanic to travel from the loop
        spline to the inspectionpoint effect bone.</para>
      </listitem>
    </orderedlist>
    <para>Strictly speaking the last one is not necessary if a seat spline
    leads to the inspectionpoint bone, but in the original rides there is
    usually a special one. The engine seems to take all splines into account
    to find the shortest way for peeps to their seat or the machanic to the
    inspectionpoint, so don't be surprised if peeps follow the mech spline to
    their seat if it has a node that's nerar to their seat :-).</para>
    <para>In general, peeps can only enter and leave splines at spline nodes!
    This has the following consequences:</para>
    <orderedlist>
      <listitem>
        <para>The loop spline should have spline nodes where entrances and
        exits can be placed. Imagine the RCT3 grid below your ride and place
        nodes near the center of outward facing square edges.</para>
      </listitem>
      <listitem>
        <para>The loop spline must have a spline node where a seat or the
        mechanic spline branches off. Additionally only one spline can branch
        off at the same spline node!</para>
      </listitem>
      <listitem>
        <para>If a seat spline leads to more than one peep effect bone, it
        needs a spline node near each. If a peep effect bone has no spline
        node next to it, the peep can beam to it but will not be able to get
        out.</para>
      </listitem>
    </orderedlist>
    <para>Finally, do not move the control points too far away from their
    node. I recommend going no farther away than half the distance between the
    spline node and the next spline node in the direction of the control point
    along the curve. To be safe, I'd keep it around 1/3 the distance.</para>
    <section>
      <title>Splines in Blender</title>
      <para>Use a Bézier Circle for the loop and Bézier Curves for the seat
      and mech splines.</para>
    </section>
  </section>
  <section>
    <title>The Importer</title>
    <xi:include href="../new_in_v18/general.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(/1)" />
    <section>
      <title>Flat rides</title>
      <para>I assume you've read the previous section, so I'll just go through
      the things you need to know for flat rides.</para>
      <important>
        <para>If you want to create a flat ride, you do not need to set up
        prefix, name and path. Those will be superseded later anyways.</para>
      </important>
      <orderedlist>
        <listitem>
          <para>Open your modxml file as if it were a scenery file. This will
          give you a good starting point. If you used groups in Blender, an
          ever better one.</para>
        </listitem>
        <listitem>
          <para>Assign your textures as normal.</para>
        </listitem>
        <listitem>
          <para>Create LODs as normal.</para>
          <important>
            <para>Do not assign the same animated model to more than one LOD!
            Copy it if necessary.</para>
          </important>
        </listitem>
        <listitem>
          <para>Assign your animations to your LODs. The first one is the rest
          animation, followed by the startup, loop and stop animations.</para>
        </listitem>
        <listitem>
          <para>Save the scenery file. No need to create ovls.</para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>Decimating keyframes</title>
      <para>The process as I described it so far has an unfortunate
      consequence: lots of keyframes of which many are not really necessary to
      create the correct animation. Unfortunately it's not easy to detect and
      remove them, especially for rotational keyframes. To counteract this, I
      added the possibility to try to remove them within certain
      constraints.</para>
      <important>
        <para>Before you do that, don't do it and test your ride to see how it
        looks <quote>normally</quote>.</para>
      </important>
      <para>In the importer, open an animation by double-clicking it (or
      selecting and pressing the <guibutton>E</guibutton> button). The Blender
      script already removes identical keyframes when they don't have a
      purpose (<abbrev>i.e.</abbrev> it keeps only the first and the last of a
      constant range). By pressing the <guibutton>Decimate</guibutton> button
      you can do some advanced keyframe removal. It tries to remove keyframes
      that are obvious in linear interpolation. As there is always an inherent
      inexactness in computer floating numbers, you need to give a threshold
      value. The default in the window works well for translational keyframes,
      but will hardly remove rotational ones. So you need to go higher and
      experiment how high you can go before your animation suffers. For my
      jumpin' jack ride I saw no change up to 0.0005, but I didn't go higher
      so that might not be the end.</para>
    </section>
  </section>
  <section>
    <title><application>Ovlmake</application></title>
    <para><application>Ovlmake</application> has a special input format I
    called <quote>raw xml</quote>. It's basically ovl files in xml form and
    therefore almost as user-unfriendly as it can get. Fortunately we'll only
    need a small subset of available xml elements for flat rides and I'll walk
    you through it with an example.</para>
    <para>Calling <application>ovlmake</application> is very simple. I assume
    you already used <application>ovlmake</application> for scenery creation
    or at least read the readme files. So you just need to call
    <application>ovlmake</application> with the xml file you'll create as an
    argument. There is also an install mode if you give the command line
    option <quote>--install</quote>. This will directly create the ovl files
    in your RCT3 directory.</para>
    <para>Whenever I talk about an <quote>ovl file</quote> in this chapter, I
    refer to an common/unique pair.</para>
    <para><application>Ovlmake</application> now verifies xml input files, a
    process called <quote>validation</quote>. This validation can spawn three
    types of messages:</para>
    <itemizedlist>
      <listitem>
        <para>errors: Showstoppers meaning the file cannot be processed or
        would surely lead to RCT3 crashes.</para>
      </listitem>
      <listitem>
        <para>warnings: Things ovlmake is pretty sure are an error, but should
        compile fine and may be even wanted in some rare cases. If you follow
        theses instructions, a warning means you did something wrong.</para>
      </listitem>
      <listitem>
        <para>notes: Things not easy to validate and that might be an error or
        not. If you follow these instructions including those things I marked
        as for validation only, a note usually also means you did something
        wrong.</para>
      </listitem>
    </itemizedlist>
    <important>
      <para>Validation can only catch most semantic errors and some logic
      errors. Neither does successful validation guarantee a working flat
      ride, nor do warnings or notes always mean it will not work (that's why
      they are not errors ;-)). Still, never ignore them without good
      reason.</para>
    </important>
    <section>
      <title>Complete Example</title>
      <para>Here is the complete example for reference:</para>
      <programlisting language="XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;rawovl basedir="output" installdir="" xmlns="http://rct3.sourceforge.net/rct3xml/raw"&gt;
  &lt;rawovl basedir="Style\Custom\Belgabor\jumpjack" prefix="belgabor-"&gt;
    &lt;rawovl file="JumpJack"&gt;
      &lt;import file="jump.xml" name="JumpJack" id="mainimport"/&gt;
    &lt;/rawovl&gt;
    &lt;rawovl file="Style"&gt;
      &lt;tex name="JumpJackTexture" format="20"&gt;
        &lt;texture&gt;&lt;data type="file"&gt;icon.png&lt;/data&gt;&lt;/texture&gt;
      &lt;/tex&gt;
      &lt;gsi name="JumpJack" tex="JumpJackTexture" left="0" top="0" right="79" bottom="63" /&gt;
      &lt;txt name="JumpJack" type="text"&gt;Jumpin Jack&lt;/txt&gt;
      &lt;txt name="JumpJackDesc" type="text"&gt;Ride inspired by an early walking robot model.&lt;/txt&gt;

      &lt;anr name="JumpJack" nametxt="JumpJack" description="JumpJackDesc" sid="JumpJack"&gt;
        &lt;attraction type="4" loopSpline="jumpSplineLoop" impref="mainimport"&gt;
          &lt;attractionPath spline="jumpSplinePeep1" impref="mainimport"/&gt;
          &lt;attractionPath spline="jumpSplineMech01" impref="mainimport"/&gt;
        &lt;/attraction&gt; 
        &lt;ride attractivity="50" entryFee="10" seating="10"&gt;
          &lt;rideOption type="12"&gt;
            &lt;parameter&gt;60&lt;/parameter&gt;
            &lt;parameter&gt;20&lt;/parameter&gt;
            &lt;parameter&gt;10&lt;/parameter&gt;
          &lt;/rideOption&gt;
          &lt;rideOption type="10"&gt;
            &lt;parameter&gt;10&lt;/parameter&gt;
          &lt;/rideOption&gt;

          &lt;rideOption type="0"/&gt;
          &lt;rideOption type="8" suboptionValue="2"&gt;
            &lt;parameter&gt;0.8&lt;/parameter&gt;
            &lt;parameter&gt;0.4&lt;/parameter&gt;
            &lt;parameter&gt;0.3&lt;/parameter&gt;
            &lt;parameter&gt;0.33&lt;/parameter&gt;
          &lt;/rideOption&gt;

          &lt;rideOption type="0"/&gt;
          &lt;rideOption type="8" suboptionValue="5"&gt;
            &lt;parameter&gt;0.8&lt;/parameter&gt;
            &lt;parameter&gt;0&lt;/parameter&gt;
            &lt;parameter&gt;0.04&lt;/parameter&gt;
            &lt;parameter&gt;1&lt;/parameter&gt;
          &lt;/rideOption&gt;
          &lt;rideOption type="8"&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;1&lt;/parameter&gt;
          &lt;/rideOption&gt;

          &lt;rideOption type="0"/&gt;
          &lt;rideOption type="11"&gt;
            &lt;parameter&gt;0&lt;/parameter&gt;
          &lt;/rideOption&gt;
        &lt;/ride&gt;
      &lt;/anr&gt;

      &lt;sid name="JumpJack" nametxt="JumpJack" icon="JumpJack" 
        ovlpath="Style\Custom\Belgabor\jumpjack\JumpJack" svd="JumpJack"&gt;
        &lt;type scenerytype="23" /&gt;
        &lt;position xsize="20" ysize="10" zsize="20" xsquares="5" zsquares="5"/&gt;
        &lt;colours choice1="21" choice2="11" choice3="6"/&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;
      &lt;/sid&gt;

      &lt;symbol name="StyleIndex" target="common" type="int" data="0" /&gt;

    &lt;/rawovl&gt;
  &lt;/rawovl&gt;
&lt;/rawovl&gt;</programlisting>
      <para>As you'll probably guess, this is from my Jumpin' Jack
      ride.</para>
    </section>
    <section>
      <title>Line-by-line Explanation</title>
      <para>Now I'll explain line by line what they mean and what you need to
      change or can customize for your own ride. This assumes you know xml, so
      I won't list closing tags. I will also give some optional elements that
      do not appear in the example. If not mentioned otherwise, their
      attributes are optional as well so you can give all or any. The values I
      give fol those attributes are usually their default values,
      <abbrev>i.e.</abbrev> the ones ovlmake uses if you omit them.</para>
      <programlisting language="XML">&lt;rawovl basedir="output\" installdir="" xmlns="http://rct3.sourceforge.net/rct3xml/raw"&gt;</programlisting>
      <para>A rawovl element defines an execution environment for ovlmake.
      That may sound strange to you, but it has two simple meanings:</para>
      <orderedlist>
        <listitem>
          <para>It defines (an) output directory(-ies) and/or</para>
        </listitem>
        <listitem>
          <para>Creates an ovl file</para>
        </listitem>
      </orderedlist>
      <para>The <emphasis>basedir</emphasis> attribute defines the general
      output directory and is relative to the current execution environment's
      path. The path starts out in the directory the xml file is in in normal
      mode and RCT3's installation directory in install mode. The
      <emphasis>installdir</emphasis> attribute supercedes
      <emphasis>basedir</emphasis> in install mode. If this is not given,
      install mode uses the <emphasis>basedir</emphasis> attribute. So
      basically the line above tells ovlmake: In normal mode, put everything
      within in the <quote>output</quote> subdirectory; In install mode, put
      everything in RCT3's installation directory.</para>
      <note>
        <para>To allow <application>ovlmake</application> to do a thorough
        validation, always end and never start paths
        (<emphasis>basedir</emphasis>, <emphasis>installdir</emphasis>) with a
        path separator (<quote>\</quote>) if they are not empty. Strictly
        speaking it's not necessary for a successful import, but helps you
        detect errors.</para>
      </note>
      <para>The <emphasis>xmlns</emphasis> attribute is standard XML and
      defines the namespace (you know XML, don't you).</para>
      <programlisting language="XML">  &lt;rawovl basedir="Style\Custom\Belgabor\jumpjack\" prefix="belgabor-"&gt;</programlisting>
      <para>Now we step into the <quote>Style\Custom\Belgabor\jumpjack</quote>
      subdirectory. Of course you should replace <quote>Belgabor</quote> with
      your own nick and <quote>jumpjack</quote> with your flat's name. The
      latter is equivalent to the theme name in the importer and should not
      contain any non-ascii characters.</para>
      <para>The <emphasis>prefix</emphasis> attribute defines the prefix for
      everything in the opened execution environment. It is used on every
      internal name. Use your nick with an optional separator.</para>
      <programlisting language="XML">    &lt;rawovl file="JumpJack"&gt;</programlisting>
      <para>The <emphasis>file</emphasis> attribute tells ovlmake that
      everything in this <emphasis>rawovl</emphasis> tag should go into an ovl
      file, in this case named <quote>JumpJack</quote>. Of course you should
      choose something that fits your ride. This ovl file will contain the
      model, spline and animation data.</para>
      <programlisting language="XML">      &lt;import file="jump.xml" name="JumpJack" id="mainimport"/&gt;</programlisting>
      <para>The import element reads data from files the importer can open as
      scenery files into an ovl. The <emphasis>file</emphasis> attribute gives
      the filename of the file to fetch data from. It needs to be relative to
      the location of XML file we are writing. You need to give the file name
      you saved your scenery data in the importer to here.</para>
      <para>The execution environment of ovlmake supersedes the name, path and
      prefix inside the scenery file, that's why we didn't need to give them
      in the last chapter.</para>
      <para>The <emphasis>name</emphasis> attribute gives the internal name
      for the svd structure ovlmake generates from the scenery file. An svd
      structure ties up all 3D model data that belongs together (models and
      <acronym>LOD</acronym>s in the importer). You should give your ride name
      here.</para>
      <important>
        <para>For all internal names, use only ASCII characters. In fact try
        to use only letters, numbers, underscores and dashes.</para>
      </important>
      <para>You can import more than one file into the same ovl, but names may
      not clash. I also recommend putting only one svd structure into one ovl.
      If you import files without model data (<abbrev>i.e.</abbrev> animation
      only modxml files), do not give a <emphasis>name</emphasis> attribute to
      prevent errors. But if you followed this tutorial exactly, you do not
      need to do this, the one line shown in the example is enough.</para>
      <para>The <emphasis>id</emphasis> attribute is not necessary for a
      successful import but helps <application>ovlmake</application> detect
      errors in the XML validation stage (See the <emphasis>impref</emphasis>
      attribute below).</para>
      <programlisting language="XML">    &lt;rawovl file="Style"&gt;</programlisting>
      <para>We create the Style ovl.</para>
      <programlisting language="XML">      &lt;tex name="JumpJackTexture" format="20"&gt;</programlisting>
      <para>The <emphasis>tex</emphasis> element creates an icon texture. The
      <emphasis>name</emphasis> attribute gives the internal name, so use
      something of your own.</para>
      <para>The <emphasis>format</emphasis> attribute determines which
      compression format ovlmake will use. Valid options are 18, 19 and 20. If
      your icon texture does not use transparency or uses binary transparency
      (fully transparent or not at all), use 18 as it uses less memory. If you
      have gradual transparency, try 19 and 20 to decide which looks better.
      19 chooses colour over transparency, 20 vice versa (fyi, the importer
      always uses 19). For those who know about 3D texture compression
      formats, 18, 19 and 20 correspond to dxt1, dxt3 and dxt5
      respectively.</para>
      <programlisting language="XML">        &lt;texture&gt;&lt;data type="file"&gt;icon.png&lt;/data&gt;&lt;/texture&gt;</programlisting>
      <para>This line gives the bitmap file of your icon texture. Keep
      everything as is, only replace <quote>icon.png</quote> with the path to
      your icon texture bitmap, relative to the XML file we're writing.</para>
      <programlisting language="XML">      &lt;gsi name="JumpJack" tex="JumpJackTexture" left="0" top="0" right="79" bottom="63" /&gt;</programlisting>
      <para>The <emphasis>gsi</emphasis> element creates an icon reference.
      The <emphasis>name</emphasis> attribute gives the internal name of the
      icon reference, the <emphasis>tex</emphasis> attribute the internal name
      of the icon texture it uses.</para>
      <para>The <emphasis>left</emphasis>, <emphasis>top</emphasis>,
      <emphasis>right</emphasis> and <emphasis>bottom</emphasis> attributes
      define the area of the icon on the texture. As you can see from these
      numbers, an icon for a flat ride has to be 80x64 pixels big.</para>
      <programlisting language="XML">      &lt;txt name="JumpJack" type="text"&gt;Jumpin Jack&lt;/txt&gt;
      &lt;txt name="JumpJackDesc" type="text"&gt;Ride inspired by an early walking robot model.&lt;/txt&gt;</programlisting>
      <para>A <emphasis>txt</emphasis> element creates a text string. We need
      two, one for the name in the menu and one for the description. The
      <emphasis>name</emphasis> attribute (again) gives the internal name of
      the text string. Keep the <emphasis>type</emphasis> attribute as
      <quote>text</quote> as given in the example. Put your text string inside
      the <emphasis>txt</emphasis> element.</para>
      <programlisting language="XML">      &lt;anr name="JumpJack" nametxt="JumpJack" description="JumpJackDesc" sid="JumpJack"&gt;</programlisting>
      <para>The <emphasis>anr</emphasis> element assembles all data that makes
      for flat ride a flat ride and not a scenery object, so this is where
      things get interesting. The <emphasis>name</emphasis> attribute is the
      internal name of the anr structure. The <emphasis>nametxt</emphasis> and
      <emphasis>description</emphasis> attributes give the internal names of
      the names strings for your ride's name in the menu and description
      respectively. The <emphasis>sid</emphasis> attribute gives the internal
      name of the accompanying sid structure. We will define that
      below.</para>
      <programlisting language="XML">        &lt;attraction type="4" loopSpline="jumpSplineLoop" impref="mainimport"&gt;</programlisting>
      <para>The <emphasis>attraction</emphasis> element contains data common
      to attractions, <abbrev>i.e.</abbrev> objects peeps interact with. The
      <emphasis>type</emphasis> attribute determines the type of the
      attraction and with that the menu your ride appears in. For flat rides
      the following values are sensible:</para>
      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="1*" />
          <colspec colwidth="2*" />
          <tbody>
            <row>
              <entry>0</entry>
              <entry>Standard transport ride</entry>
            </row>
            <row>
              <entry>1</entry>
              <entry>Gentle ride</entry>
            </row>
            <row>
              <entry>2</entry>
              <entry>Water ride</entry>
            </row>
            <row>
              <entry>3</entry>
              <entry>Steel coaster</entry>
            </row>
            <row>
              <entry>4</entry>
              <entry>Thrill ride</entry>
            </row>
            <row>
              <entry>5</entry>
              <entry>Other ride</entry>
            </row>
            <row>
              <entry>6</entry>
              <entry>Junior ride</entry>
            </row>
            <row>
              <entry>15</entry>
              <entry>Wooden coaster</entry>
            </row>
            <row>
              <entry>16</entry>
              <entry>Suspended coaster</entry>
            </row>
            <row>
              <entry>17</entry>
              <entry>Water coaster</entry>
            </row>
            <row>
              <entry>19</entry>
              <entry>Pool ride</entry>
            </row>
            <row>
              <entry>21</entry>
              <entry>Safari transport ride</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The <emphasis>loopSpline</emphasis> attribute gives the name of
      your loop spline as it appears in the importer (as you named it in
      Blender).</para>
      <para>The <emphasis>impref</emphasis> attribute tells ovlmake during the
      validation step which import is supposed to contain the spline so it can
      check whether it is actually there.</para>
      <programlisting language="XML">          &lt;attractionPath spline="jumpSplinePeep1" impref="mainimport"/&gt;</programlisting>
      <para>The <emphasis>attractionPath</emphasis> elements with their
      <emphasis>spline</emphasis> attribute list the other splines for your
      ride. Give the peep splines first and the mech spline last.</para>
      <note>
        <para>Optional, on the same nesting level as the
        <emphasis>attractionPath</emphasis> elements.</para>
        <programlisting language="XML">          &lt;attractionMisc baseUpkeep="4960" flags="0" maxHeight="16" /&gt;</programlisting>
        <para>The <emphasis>baseUpkeep</emphasis> attribute gives the basic
        ride upkeep. How it works exactly for flats I don't know, but I
        suspect it's per year and rounded up per month.</para>
        <para>The <emphasis>flags</emphasis> attribute sets certain options.
        To get your value, add up the value of all options you want to set.
        Only a few are known, here is a list:</para>
        <informaltable>
          <tgroup cols="2">
            <colspec colwidth="1*" />
            <colspec colwidth="2*" />
            <tbody>
              <row>
                <entry>1</entry>
                <entry>If set, kids may not ride</entry>
              </row>
              <row>
                <entry>16</entry>
                <entry>If set, the ride has no test mode (no yellow).</entry>
              </row>
              <row>
                <entry>128</entry>
                <entry>If set, the user can only select <quote>full
                load</quote>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>The <emphasis>maxHeight</emphasis> attribute gives the maximal
        Height over ground in height steps the ride can be build at.</para>
      </note>
      <programlisting language="XML">        &lt;ride attractivity="50" entryFee="10" seating="10"&gt;</programlisting>
      <para>The <emphasis>ride</emphasis> element contains data common to
      objects peeps can ride.</para>
      <para>The <emphasis>attractivity</emphasis> attribute determines how
      many peeps will enter the park when the ride is built by the
      user.</para>
      <para>The <emphasis>entryFee</emphasis> attribute determines the preset
      for the entry fee.</para>
      <para>The <emphasis>seating</emphasis> attribute determines the peeps'
      positions/animation on-ride. I've only tested a couple of sitting
      positions, see above for placement of the peep effect bones. Here is a
      list of allowed values (note: the explanation is from debugging strings
      in the RCT3 exe, so in some cases I do not know what exactly it
      means):</para>
      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="1*" />
          <colspec colwidth="2*" />
          <tbody>
            <row>
              <entry>0</entry>
              <entry>Stand</entry>
            </row>
            <row>
              <entry>1</entry>
              <entry>Sit</entry>
            </row>
            <row>
              <entry>2</entry>
              <entry>Sledge</entry>
            </row>
            <row>
              <entry>3</entry>
              <entry>Lay</entry>
            </row>
            <row>
              <entry>4</entry>
              <entry>Bike</entry>
            </row>
            <row>
              <entry>5</entry>
              <entry>Car</entry>
            </row>
            <row>
              <entry>6</entry>
              <entry>Horse</entry>
            </row>
            <row>
              <entry>7</entry>
              <entry>Row, 1 oar</entry>
            </row>
            <row>
              <entry>8</entry>
              <entry>Row, 2 oars</entry>
            </row>
            <row>
              <entry>9</entry>
              <entry>Sit, Virginia Reel</entry>
            </row>
            <row>
              <entry>10</entry>
              <entry>Sit, harness</entry>
            </row>
            <row>
              <entry>11</entry>
              <entry>Sit, bar</entry>
            </row>
            <row>
              <entry>12</entry>
              <entry>Observation (tower?)</entry>
            </row>
            <row>
              <entry>13</entry>
              <entry>Sit, harness w/ dangling feet</entry>
            </row>
            <row>
              <entry>14</entry>
              <entry>Horse steeple (?)</entry>
            </row>
            <row>
              <entry>15</entry>
              <entry>Pedalo</entry>
            </row>
            <row>
              <entry>16</entry>
              <entry>Pedal bike</entry>
            </row>
            <row>
              <entry>17</entry>
              <entry>Canoe</entry>
            </row>
            <row>
              <entry>18</entry>
              <entry>Dinghy</entry>
            </row>
            <row>
              <entry>19</entry>
              <entry>Lay, front</entry>
            </row>
            <row>
              <entry>20</entry>
              <entry>Row, left oar</entry>
            </row>
            <row>
              <entry>21</entry>
              <entry>Row, right oar</entry>
            </row>
            <row>
              <entry>22</entry>
              <entry>Horse, merry-go-round</entry>
            </row>
            <row>
              <entry>23</entry>
              <entry>Horse, Steeplechase</entry>
            </row>
            <row>
              <entry>24</entry>
              <entry>Jump</entry>
            </row>
            <row>
              <entry>25</entry>
              <entry>Bum bounce (24 and 25 were not really clear, they may be
              switched)</entry>
            </row>
            <row>
              <entry>26</entry>
              <entry>Dance</entry>
            </row>
            <row>
              <entry>27</entry>
              <entry>Surf board</entry>
            </row>
            <row>
              <entry>28</entry>
              <entry>Wind surf</entry>
            </row>
            <row>
              <entry>29</entry>
              <entry>Fishing</entry>
            </row>
            <row>
              <entry>30</entry>
              <entry>Slide, body back</entry>
            </row>
            <row>
              <entry>31</entry>
              <entry>Slide, ring</entry>
            </row>
            <row>
              <entry>32</entry>
              <entry>Inflatable</entry>
            </row>
            <row>
              <entry>33</entry>
              <entry>Sit, stadium</entry>
            </row>
            <row>
              <entry>34</entry>
              <entry>Swim</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <note>
        <para>There are two optional attributes you may want to give (in fact
        the above are also optional, but those you likely want to
        give).</para>
        <para>The <emphasis>minCircuits</emphasis> and
        <emphasis>maxCircuits</emphasis> attributes determine how many
        circuits the user can set. The defaults are <quote>1</quote> and
        <quote>-1</quote> respectively, the -1 telling RCT3 ho use its
        internal default, which is 6 for flat rides.</para>
      </note>
      <para>Then a couple of <emphasis>rideOption</emphasis> elements follow.
      These set a couple of further options. The <emphasis>type</emphasis>
      attribute determines what is set. Keep the option types in the order
      displayed in the example, it's the most common order for normal flat
      rides in the game. Each option has zero to four parameters, depending on
      the type. I'll try to explain the types in the order it makes sense to
      explain them, not in the order they appear.</para>
      <programlisting language="XML">          &lt;rideOption type="0"/&gt;</programlisting>
      <para>The type 0 option has no parameters and acts as a separator. Flat
      rides theoretically shouldn't need them, but most of the original ones
      have them so put them in.</para>
      <programlisting language="XML">          &lt;rideOption type="12"&gt;
            &lt;parameter&gt;60&lt;/parameter&gt;
            &lt;parameter&gt;20&lt;/parameter&gt;
            &lt;parameter&gt;10&lt;/parameter&gt;
          &lt;/rideOption&gt;</programlisting>
      <para>The type 12 option influences how much peeps are willing to pay
      for the ride. Like type 8 (see below), the three parameters correspond
      to excitement, intensity and nausea. To get the maximum yrice peeps are
      willing to pay, multiply each parameter with the corresponding final
      ride value and add them up. Finally add a base price which seems to be
      160 (there doesn't seem to be a way to influence that). As always, money
      related things are given in small currency denomination
      (<abbrev>e.g.</abbrev> cents). Credits go to SLiPCoR for nailing this
      down. He experimented with TrackedRides, so I cannot guarantee it's 100%
      the same for flats.</para>
      <programlisting language="XML">          &lt;rideOption type="10"&gt;
            &lt;parameter&gt;10&lt;/parameter&gt;
          &lt;/rideOption&gt;</programlisting>
      <para>The type 10 option determines how fast the ride breaks. The higher
      the parameter, the faster the ride durability decreases. Set this high
      to have it break down fast if you want to test your mechanic
      spline/effect point setup. Setting this to 0 makes it not break down at
      all. If this works forever or similar to the no-repair cheat is
      currently unknown.</para>
      <para>According to SLiPCoR, the game calculates durability decereases
      every 20 (game) minutes. To find the durability decrease in %, divide
      the type 10 parameter by 256.</para>
      <programlisting language="XML">          &lt;rideOption type="8"&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;5&lt;/parameter&gt;
            &lt;parameter&gt;1&lt;/parameter&gt;
          &lt;/rideOption&gt;</programlisting>
      <para>The type 8 option sets excitement, intensity and nausea values for
      the ride. As you can see, the option can also take a
      <emphasis>subOption</emphasis> attribute, which in this case determines
      when those ratings apply. The option without
      <emphasis>subOption</emphasis> attribute sets the base values. Suboption
      5 sets the maximal influence of surrounding scenery. Suboption 2 sets
      the values added per circuit.</para>
      <para>The first three parameters correspond to excitement, intensity and
      nausea respectively. The fourth parameter is a factor applied to all of
      the above to get the final value added. What this is good for is open
      for speculation, but I guess it was added to be able to set the first
      three parameters to the maximal influence and used the factor to
      calculate that down per instance (<abbrev>e.g.</abbrev> for a circuit of
      6 allowed, there are lots of other such settings applying to other input
      values, but those are only used on tracked rides).</para>
      <programlisting language="XML">          &lt;rideOption type="11"&gt;
            &lt;parameter&gt;0&lt;/parameter&gt;
          &lt;/rideOption&gt;</programlisting>
      <para>Completely unknown. I saw parameters of mostly 0 or 1, most have
      0.</para>
      <programlisting language="XML">      &lt;sid name="JumpJack" nametxt="JumpJack" icon="JumpJack" 
        ovlpath="Style\Custom\Belgabor\jumpjack\JumpJack" svd="JumpJack"&gt;</programlisting>
      <para>The <emphasis>sid</emphasis> element creates a sid structure
      necessary for all objects you can place in RCT. The
      <emphasis>name</emphasis> attribute gives the internal name of the
      structure (the one you used in the <emphasis>sid</emphasis> attribute of
      the <emphasis>anr</emphasis> element). The <emphasis>nametxt</emphasis>
      attribute is again the name text string's internal name. The
      <emphasis>icon</emphasis> attribute gives the internal name of the
      respective icon reference.</para>
      <para>The <emphasis>ovlpath</emphasis> attribute is the path of the ovl
      that contains your ride's 3D object relative to RCT3's installation
      directory. The <emphasis>svd</emphasis> attribute is the internal name
      of the svd structure in it (the one you set via the
      <emphasis>name</emphasis> attribute of the <emphasis>import</emphasis>
      element above). An error in one of these two causes the well-known "no
      :sid for :svd"-error.</para>
      <note>
        <para>The <emphasis>ovlpath</emphasis> attribute is not easy to
        validate. Successful validation (and a meaningful note that something
        went wrong) depends on two things: You followed the instructions about
        using path separators in path attributes given above and you only use
        an <emphasis>installdir</emphasis> attribute in the root
        <emphasis>rawovl</emphasis> element and this
        <emphasis>installdir</emphasis> attribute is empty (as in this
        example).</para>
        <para>If you do <emphasis role="bold">not</emphasis> get a note that
        something is wrong, it's pretty sure correct. Usually you only get
        false positives.</para>
      </note>
      <programlisting language="XML">        &lt;type scenerytype="23" /&gt;</programlisting>
      <para>Do not change. The value 23 means the sid structure describes a
      (flat) ride.</para>
      <programlisting language="XML">        &lt;position xsize="20" ysize="10" zsize="20" xsquares="5" zsquares="5"/&gt;</programlisting>
      <para>The <emphasis>sidposition</emphasis> element describes the size
      and (optionally) position of your object. I'll only explain the size
      aspect here.</para>
      <para>The <emphasis>xsize</emphasis>, <emphasis>ysize</emphasis> and
      <emphasis>zsize</emphasis> attributes give the size of your object in
      modeller units in the <emphasis role="bold">game coordinate
      system</emphasis>. That means coming from Blender, you should enter the
      size in y-direction, z-direction and x-direction respectively. Round up
      xsize and zsize to the next full RCT3 square, ysize to the next full
      number.</para>
      <para>The <emphasis>xsquares</emphasis> and
      <emphasis>zsquares</emphasis> attributes give the size of the object in
      RCT3 grid squares. Enter xsize / 4 into xsquares and zsize / 4 into
      ysquares. If you don't get round numbers, you did something wrong. These
      are extremely important as they define the size of the base of your
      ride.</para>
      <para>Optionally you can add a <emphasis>supports</emphasis> attribute
      to get supports, but you need to activate collision detection to really
      get them (see below). Valid values are: adventure, crazygolf,
      crazygolfholes, girder, ornate, pathasphalt, pathcrazy, pathdirt,
      pathleafy, marble, pathtarmac, flatqueueset1, romanpillar, scaffolding,
      space, spooky, steel, ts1, ts2, ts3, ts4, ts5, flatwildwest, aquarium,
      aquariumcorner, defaultpool, defaultpoolpath, defaultpoolsmall, sand,
      pathunderwater, ts1a, ts6, ts7 and ts8. Usually this is
      <quote>scaffolding</quote> for flat rides.</para>
      <programlisting lang="XML">        &lt;colours choice1="21" choice2="11" choice3="6"/&gt;</programlisting>
      <para>Optional, gives the default colours for recolourable textures and
      lights.</para>
      <programlisting lang="XML">        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;</programlisting>
      <para>Optional. You can leave this out if you do not want collision
      detection for your ride. All attributes are optional. Personally I found
      rides hard to place as RCT3 only shows the base size shadow if collision
      detection is enabled. Actually you have three choices. Do not give this
      element, give it once (as in the example) or give it once for every
      square of your ride (yes, that would mean you'd have to give 25 in the
      example). The latter option sets collision detection for each individual
      square (see <xref linkend="s_adv_raw" />).</para>
      <para>The <emphasis>flags</emphasis> attribute sets flags 33-64 known
      from the importer. The example shows what you minimally need to set for
      working collision detection. These are bitflags, so add up
      2<superscript>FlagNo - 33</superscript> for every flag. If you want
      supports, you need to activate Flag 34 as well, so you would need to set
      <emphasis>flags</emphasis> to 3 (1 + 2).</para>
      <para>The <emphasis>minHeight</emphasis> and
      <emphasis>maxHeight</emphasis> attributes correspond to unknown 6 and 7
      in the importer and define from where to where the square is considered
      <quote>filled</quote>. You need to use rounded modeller units. The
      <emphasis>supports</emphasis> attribute is unknown 9 in the importer and
      needs to be set to 1 along setting <emphasis>flags</emphasis> to 3 to
      have supports (of course you also need to name supports in the
      <emphasis>position</emphasis> element).</para>
      <para>In case you miss unknown 8, it is (and needs to be) automatically
      calculated from <emphasis>minHeight</emphasis> and
      <emphasis>maxHeight</emphasis>.</para>
      <programlisting language="XML">      &lt;symbol name="StyleIndex" target="common" type="int" data="0" /&gt;</programlisting>
      <para>Determines the theme type of your ride. Leave everything as it is,
      only change the <emphasis>data</emphasis> attribute if necessary. This
      is rather more important for rides than for CS as it determines the
      default entry and exit of your ride. Here is a list of available
      options, I omitted those that don't have a themed ride
      entry/exit:</para>
      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="1*" />
          <colspec colwidth="2*" />
          <tbody>
            <row>
              <entry>0</entry>
              <entry>Generic</entry>
            </row>
            <row>
              <entry>1</entry>
              <entry>Western</entry>
            </row>
            <row>
              <entry>2</entry>
              <entry>Spooky</entry>
            </row>
            <row>
              <entry>3</entry>
              <entry>Sci-fi</entry>
            </row>
            <row>
              <entry>4</entry>
              <entry>Adventure</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section id="s_adv_raw">
      <title>Advanced topics</title>
      <para>This section will explain how you can do some nifty things
      regarding collision detection and entries and exits. <xref
      linkend="a_ori" /> visualizes an example 3x3 ride and helps you to find
      out the correct settings for the result you want to achieve.</para>
      <figure float="1" id="a_ori">
        <title>Picture visualizing the orientation of a 3x3 ride in game when
        not rotated by the player. Four squares have been marked to illustrate
        the index for <emphasis>squareUnknown</emphasis> elements and
        <emphasis>xPos</emphasis>/<emphasis>zPos</emphasis> for
        <emphasis>rideStationLimit</emphasis> elements.</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="orientation.png" scale="40" />
          </imageobject>
        </mediaobject>
      </figure>
      <para>The first thing we'll need to discuss are flags. As you've learned
      above, Flags 33-64 from the importer are actually per square. The
      others, 1-32, are as presented in the importer per object. To set them,
      add a <emphasis>importerUnknowns</emphasis> element and set its
      <emphasis>flags</emphasis> attribute.</para>
      <programlisting language="XML">        &lt;importerUnknowns flags="0x00200000"/&gt;</programlisting>
      <para>It needs to be at the same level as the
      <emphasis>squareUnknowns</emphasis> elements, so I suggest adding it
      just above the first one. Here I used the hexadecimal notation for the
      value which is an alternative to the one presented above (integer
      number). It sets Flag 22 (the integer representation would be
      <quote>2097152</quote>, which looks a lot less orderly, doesn't it?)
      which activates exact ride bases (we'll come to that next, basically
      everything I'll say about <emphasis>squareUnknowns</emphasis> elements
      depends on this setting), if it's not activated, the ride base will
      always encompass all squares. Another flag interesting for flat rides is
      Flag 17, which removes the base completely and makes it placeable on
      water only, like the whale and dolphin shows (to set, use
      <quote>0x00010000</quote>).</para>
      <para>To make use of exact ride bases, we need to give one
      <emphasis>squareUnknowns</emphasis> element per square. To keep things
      manageable, I'll switch to a 3x3 example as seen in the picture
      above.</para>
      <programlisting language="XML">        &lt;squareUnknowns flags="0" minHeight="0" maxHeight="0" supports="0"/&gt; &lt;!-- Index 0 --&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="0" supports="0"/&gt; &lt;!-- Index 2 --&gt;

        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt; &lt;!-- Index 3 --&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;

        &lt;squareUnknowns flags="1" minHeight="1" maxHeight="7" supports="0"/&gt;
        &lt;squareUnknowns flags="1" minHeight="0" maxHeight="7" supports="0"/&gt;
        &lt;squareUnknowns flags="1" minHeight="1" maxHeight="1" supports="0"/&gt; &lt;!-- Index 8 --&gt;</programlisting>
      <para>As you can see the index mentioned in the picture is a zero-based
      list index, so the first element you give corresponds to the top square
      in the picture and the last one to the bottom one. Mostly I've set up
      the ride to be 7 units high with collision detection, but the corner
      squares have special settings.</para>
      <para>The top corner (index 0) has collision detection switched off. It
      will not have a base and not highlight while placing.</para>
      <para>The left corner (index 2) has collision detection, but both
      <emphasis>minHeight</emphasis> and <emphasis>maxHeight</emphasis> are 0,
      therefore it does not have a <quote>blocked volume</quote>. The part
      will have a base and highlight while placing. It will block paths on the
      ground, but not scenery.</para>
      <para>The right corner (index 6, not indicated) also has collision
      detection and has a <quote>blocked volume</quote>, but it starts above
      ground. It will not have a base, but highlight during placing. It blocks
      both paths and (collision-detection enabled) scenery overlapping it's
      volume.</para>
      <para>The bottom corner (index 8) has collision detection, starts above
      ground and does not have a <quote>blocked volume</quote>. As the
      previous one, it will not have a base, but highlight during placing. It
      does not block scenery, but blocks paths if it <quote>cuts</quote> their
      volume (usually 4h above the path).</para>
      <para>To summarize, if a square</para>
      <itemizedlist>
        <listitem>
          <para>has collision detection enabled, it will highlight during
          placing.</para>
        </listitem>
        <listitem>
          <para>has height 0 inside its min/max range, it will show a
          base.</para>
        </listitem>
        <listitem>
          <para>has an actual volume blocked, it will block
          collision-detection enabled scenery.</para>
        </listitem>
        <listitem>
          <para>will block paths, if the path's volume (4h above it) overlaps
          <emphasis>minHeight</emphasis> and/or
          <emphasis>maxHeight</emphasis>.</para>
        </listitem>
        <listitem>
          <para>rides act like scenery.</para>
        </listitem>
      </itemizedlist>
      <para>The second topic is limiting where the player can place the ride
      entrance and exit. You can see this in action for example on the sky
      swing, the dolphin show and the whale show. This feature was introduced
      in Soaked!, so first we need to tell <application>ovlmake</application>
      to write Soaked! stuctures. To do that, add a
      <emphasis>version</emphasis> attribute to the
      <emphasis>attraction</emphasis> element and set it to 2 (note that if
      you want to keep the <emphasis>version</emphasis> attribute and go back
      to vanilla structures, you need to set it to 0).</para>
      <programlisting language="XML">        &lt;attraction type="4" <emphasis
          role="bold">version="2"</emphasis> loopSpline="jumpSplineLoop" impref="mainimport"&gt;</programlisting>
      <para>Now to add station limits to your ride, you need to add
      <emphasis>rideStationLimit</emphasis> elements to your
      <emphasis>ride</emphasis> element, on the same level as the
      <emphasis>rideOption</emphasis> elements. I suggest adding them after
      those.</para>
      <important>
        <para>As soon as you add one or more
        <emphasis>rideStationLimit</emphasis> elements, RCT3 deactivates all
        default placement possibilities (<abbrev>i.e.</abbrev> everywhere
        around the square base of the ride).</para>
      </important>
      <para>So if you wanted to restore the default, you'd need to add:</para>
      <programlisting language="XML">          &lt;rideStationLimit xPos="0" zPos="0" flags="0x00000039"/&gt;
          &lt;rideStationLimit xPos="1" zPos="0" flags="0x00000038"/&gt;
          &lt;rideStationLimit xPos="2" zPos="0" flags="0x0000003C"/&gt;

          &lt;rideStationLimit xPos="0" zPos="1" flags="0x00000031"/&gt;
          &lt;rideStationLimit xPos="2" zPos="1" flags="0x00000034"/&gt;

          &lt;rideStationLimit xPos="0" zPos="2" flags="0x00000033"/&gt;
          &lt;rideStationLimit xPos="1" zPos="2" flags="0x00000032"/&gt;
          &lt;rideStationLimit xPos="2" zPos="2" flags="0x00000036"/&gt;</programlisting>
      <para>The <emphasis>xPos</emphasis> and <emphasis>zPos</emphasis>
      attributes select the square as illustrated in the picture above. The
      <emphasis>flags</emphasis> attribute selects what (entrance and/or exit)
      can be placed on which edge of the square. You need to add up the values
      for the edges (see <xref linkend="a_ori" />) and for the entrance (16 or
      0x10 hex) and/or exit (32 or 0x20 hex) you want enabled.</para>
      <para>The nifty thing is that you can also enable placement within the
      ride square if your collision detection settings allow it. If you allow
      an entrance/exit to be placed on the same square from different ride
      squares, there seems to be a bug that in some orientations RCT3 shows
      the red <quote>cannot place</quote> shadow. Nevertheless if you actually
      try to do it, it works.</para>
    </section>
  </section>
</article>