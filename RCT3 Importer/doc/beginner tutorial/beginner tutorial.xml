<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article class="whitepaper" revision="1.0">
  <title>Beginner's Tutorial for the RCT3 Custom Scenery Importer</title>

  <articleinfo>
    <date>12.11.2006</date>

    <revhistory>
      <revision>
        <revnumber>1</revnumber>

        <date>14.11.2006</date>

        <author>
          <surname>Belgabor</surname>
        </author>

        <revdescription>
          <para>Initial version for v16fix4</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>2</revnumber>

        <date>21.11.2006</date>

        <author>
          <surname>Belgabor</surname>
        </author>

        <revdescription>
          <para>Update for v16fix5</para>
        </revdescription>
      </revision>
    </revhistory>

    <author>
      <surname>Belgabor</surname>
    </author>
  </articleinfo>

  <tocchap>
    <tocentry></tocentry>
  </tocchap>

  <para>This tutorial will lead you through the steps required to import your
  first object into RCT3. Only the options and steps required for a basic
  import will be explained, do not expect to hear about everything you can do
  with it.</para>

  <para>This document applies to the RCT3 Importer Version 16fix5.</para>

  <section>
    <title>Preparing for the import</title>

    <para>This section will show you what you need to do before running the
    importer.</para>

    <section>
      <title>Initial preparation</title>

      <para>While it may sound trivial, it's an important step to keep things
      organized: Create a directory on your hard disk that will hold your
      custom scenery sets. You should also create a subdirectory within for
      each set. Within each of those it is recommended to put each CS object
      along with all belonging files into it's own subdirectory.</para>
    </section>

    <section id="sect12">
      <title>Creating the 3D model</title>

      <para>This process is very much beyond the scope of this document. You
      need to get a suitable 3D modeler and read a few tutorials on how to use
      it. Here is a list of the modelers used most often for creating custom
      scenery for RCT3:</para>

      <itemizedlist>
        <listitem>
          <para>3DStudio / 3DSmax. Very expensive professional 3D modeler. If
          you can get an academic license you might be able to afford
          it.</para>
        </listitem>

        <listitem>
          <para>MilkShape. Cheap (25$) shareware with a 30 day trial period.
          Was the custom scenery creation tool of choice for a long time, but
          more and more try their hands on</para>
        </listitem>

        <listitem>
          <para>Blender. Free open source professional modeler. It's user
          interface is pretty non-standard and therefore requires a bit of
          patience to get used to. When you get acquainted to it you won't
          want to miss it anymore and Blender becomes a very powerful
          tool.</para>
        </listitem>

        <listitem>
          <para>SketchUp. Comes in two versions, Google SketchUp (free) and
          SketchUp Pro (commercial, trial available). Very easy and intuitive
          to use. Current drawbacks are that the free version can only export
          to Google Earth formats, which need to be imported and manipulated
          in Blender to bring them into a state suitable for using in the
          importer. Another drawback is that SketchUp sometimes produces
          superfluous faces and edges which have to be cleaned up in Blender
          (more on faces below).</para>
        </listitem>
      </itemizedlist>

      <para>For more detailed information and links to less commonly used
      modelers as well as modeler specific tutorials see <ulink
      url="http://belgabor.vodhin.net/software">Belgabor's software
      page</ulink>.</para>

      <para>For creating your models you should keep the following guidelines
      in mind:</para>

      <itemizedlist>
        <listitem>
          <para>Keep your first model simple to get accustomed to the
          importing process. A simple cube works well for example.</para>
        </listitem>

        <listitem>
          <para>Make your model the right size and position it correctly. A
          RCT3 square is usually 4x4 of your modelers units big (in SketchUp
          things are a bit more complex). For more information see <ulink
          url="http://belgabor.vodhin.net/facts">Belgabor's facts &amp;
          figures page</ulink>.</para>
        </listitem>

        <listitem>
          <para>Keep the number of faces as low as possible. A face (also
          called <quote>poly</quote>, <quote>tri</quote> or
          <quote>triangle</quote>) is the smallest surface subunit of a model
          and the unit that causes <quote>work</quote> for the 3D engine of
          RCT3. Therefore the more faces your model has, the longer the engine
          needs to display your scenery item which may lead to lag. As a rule
          of thumb try to stay below 500 faces, even better below 300. Note
          that the engine uses triangular faces while most modern modelers can
          use at least quads (faces with four corners or vertices). These are
          converted to triangles in the export or conversion process, so the
          actual number of faces may be a lot higher than your modeler
          shows.</para>

          <para>Some tips on how to keep your face number low:</para>

          <itemizedlist>
            <listitem>
              <para>Make things only as round as necessary. Rounded parts
              usually use the most faces. As a rule of thumb never give a full
              circle more than 16 sections without good reason. If the part of
              the object is really thin, you might even get a good looking
              result with just three sections and keeping it welded (more on
              that below).</para>

              <para>The same applies to spheres. If possible use low iteration
              icospheres. Modelers can also create so-called uv-spheres. These
              use up more faces but are easier to uv-map (hence the name. More
              on uv-mapping below), so use them only if you need a complex
              texture on it.</para>
            </listitem>

            <listitem>
              <para>Remove unnecessary invisible faces. If your model has
              invisible (inside) face1.3s due to the modelling process, remove
              them as they will use up processing power. Keep in mind that
              they may still affect lighting if their vertices are welded to
              visible faces, so it may be necessary to keep them in some cases
              (more on this below).</para>
            </listitem>

            <listitem>
              <para>Consider using alpha textures. This is a rather advanced
              topic, but you should be aware of the possibility. If you want
              to create an object with a filigree see-through pattern (a
              railing or iron works for example), it may be easier for you and
              on the engine if you don't model the pattern but rather use a
              plane that has a see-through (alpha) texture assigned.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Selectively weld/unweld your model. To understand this topic
          you first have to understand how the RCT3 3D engine (and probably
          all other 3D engines as well) calculates the lighting of the object.
          For this the difference of the direction the light falls in (in RCT3
          the sun at day and lamps at night) and the direction of your
          objects' normals is used.</para>

          <para>Now you may ask what a normal is. Let's start with a face
          normal. You can imagine this as an arrow that points away form the
          face being perpendicular to it, so if compared to the direction the
          light comes in you get the angle under which it hits the face and it
          is possible to shade it accordingly.</para>

          <para>To make objects look more realistic, the 3D engine rather uses
          vertex normals. This concept is a bit harder to understand. The
          vertex normal is a property of the vertices (corners) of your object
          and represent the normal of the tangent plane of your object at that
          vertex. To understand what that means imagine your object as a real
          and put it on the top of your desk touching it only with one vertex.
          That (roughly) makes your desk the tangent plane of that vertex, so
          it's normal would point vertically to the floor in that position.
          Vertex normals are automatically calculated by your 3D modeler,
          usually as the mean of the face normals of all faces the vertex is
          part of.</para>

          <para>Here comes the concept of welded and unwelded vertices into
          play. Imagine the corner of a cube. Usually your modeler creates it
          welded. This means the corner is only one vertex which is used by
          the three faces that border it. If you unweld this vertex (How to do
          that depends on your modeler, search for <quote>Unweld</quote> or
          <quote>Unbind points/vertices</quote>) a copy of it is created for
          each face that uses it. In the example above the one corner vertex
          is replaced by three, one for (and used by) each face. If you think
          a bit about it you will realize what that means for the vertex
          normal(s). If the vertex is welded, its vertex normal will point
          away from the center of the cube and the engine of RCT3 will treat
          it as if the object was supposed to be round there. If the vertex is
          unwelded, each of the three vertices in it's place gets its own
          vertex normal. As each is only part of one face, its vertex normal
          is identical to the face normal. You may want to have a look at the
          weld/unweld section on <ulink
          url="http://belgabor.vodhin.net/facts">Belgabor's facts &amp;
          figures page</ulink> for some pictures about this. The take home
          message is you need to unweld vertices/edges if they are supposed to
          look <quote>pointy</quote>, if they are supposed to be round, keep
          them welded.</para>

          <para>Usually you cannot selectively unweld a vertex in regard to
          certain edges, you can only fully unweld it. If you want to keep
          some edges that it's part of welded, you need to first unweld it and
          then weld the vertices of the faces whose common edge you want to
          have welded. Note: How to weld depends again on your modeler, it can
          be a bit hard to find (for example it is called <quote>Remove
          Doubles</quote> in Blender).</para>
        </listitem>

        <listitem>
          <para>Usually you shouldn't bother using the 3D modeler's materials
          for your object. RCT3 and therefore the Importer can only used
          uv-mapped bitmap textures, while most modelers use procedural
          (calculated) textures. There are ways to make a bitmap texture form
          such procedural textures (usually called
          <quote>texture-baking</quote> or <quote>uv-baking</quote>), but
          usually they don't lead to a satisfactory result.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="sect13">
      <title>Obtaining a bitmap texture for your model</title>

      <para>As stated above you need to use bitmap textures for your custom
      scenery 3D models. A further prerequisite for the final texture you'll
      use in the importer is that it has to be square and its width and height
      have to be a power of two (for example 64x64, 128x128 or 256x256). Note
      that this size can have an effect on the objects load time and the
      amount of memory needed later in the game leading to lag, so don't make
      them bigger than necessary. I'd recommend to use 256x256. If you have a
      very detailed texture you could use 512x512. If your object is
      single-colored, even a 4x4 texture is enough (maybe even 1x1 works, but
      I haven't tested that).</para>

      <para>The first (and hardest) option to obtain a texture is to draw it
      yourself using a bitmap editor like Adobe Photoshop or The Gimp. Even if
      you don't want to draw your own texture it is a good idea to have a
      bitmap editor around to resize or manipulate them.</para>

      <para>The second option is to find a suitable texture on the net. There
      are lots of free (and even more non-free) texture sites out there. One
      thing you should keep in mind is not to violate copyright. <emphasis>It
      is not necessary to say something is protected by copyright, copyright
      is automatic!</emphasis> So if a site doesn't explicitly say you are
      free to use images or textures on it, <emphasis>you may not</emphasis>.
      Also remember that symbols and brand names can be protected by copyright
      or trademark laws, so it's better not to use them. If you're annoyed by
      this, remember it protects you as well. So whatever CS you create,
      others may not host the set or rip your models or textures without your
      permission =)</para>

      <para>A third possibility is to use a special texture creation software.
      A good (and free) example is Wood Workshop by <ulink
      url="http://www.spiralgraphics.biz/index.htm">Spiral Graphics</ulink>,
      which is a tuned-down version of their commercial texture creator,
      Genetica. They also offer free texture packs which can be used with the
      Genetica Viewer (also free). There are also other texture creation
      software packages, just Google for them (and tell me if you find a good
      free one :-P ).</para>

      <para>In whatever way you get your texture, it is always good to get a
      seamless one. A seamless texture is a texture that doesn't have a
      visible rim if tiled (checkerboarded). This allows you a bit of
      sloppiness when uv-mapping or getting a more detailed looking model with
      a smaller actual texture size.</para>

      <para>You also should create an icon texture at this point. This is a
      bitmap that will hold menu icons for your theme. It has the same
      restrictions as a model texture, the only thing that is different is
      that you can (and should) use a png with transparency here, otherwise
      the alternating white/gray background will not show through. The
      standard size is 512x512 and usually 64x64 icons are set up. You don't
      need to create the final icons at this point, but at least a temporary
      icon texture is needed. Icons are later numbered starting at the top
      left, going right first and then down (like western writing).</para>
    </section>

    <section id="sect14">
      <title>UV-Mapping</title>

      <para><indexterm zone="sect14">
          <primary>UV-Mapping</primary>
        </indexterm>UV-Mapping is used to <quote>assign</quote> a (bitmap)
      texture to a model and is done inside your 3D modeler. I put
      <quote>assign</quote> in quotes since technically it's not correct. What
      you do is give the vertices of your model an additional set of
      coordinates (additional to its spacial x/y/z 3D coordinates) in
      so-called texture-space. These coordinates are called <quote>u</quote>
      and <quote>v</quote> (hence uv-mapping) or <quote>s</quote> and
      <quote>t</quote>. There is a difference between these two naming
      conventions but that doesn't need to concern you for creating custom
      scenery. You also should know that these coordinates are relative. That
      means 0 represents one end of the texture and 1 the other one, so the
      size of the texture you use for uv-mapping can differ from the one you
      use later in the importer, only the layout of the texture has to match
      (ie don't mirror it).</para>

      <para>While this may sound complicated or strange, it just tells the
      model (and later the 3D engine) which part of the texture to use for
      which part (face) of your object. So what you should remember from the
      explanation in the previous paragraph is:</para>

      <itemizedlist>
        <listitem>
          <para>The uv-mapping is a property of your model and is therefore
          stored inside the 3D model file.</para>
        </listitem>

        <listitem>
          <para>You don't have to assign the same texture to the model in the
          importer that you used to uv-map.</para>
        </listitem>

        <listitem>
          <para>This also applies to the size.</para>
        </listitem>

        <listitem>
          <para>(Note for later: You always have to assign a texture in the
          importer, even if it's the same one you used to uv-map. The
          information which texture was used is <emphasis>not</emphasis>
          transferred to the importer.)</para>
        </listitem>
      </itemizedlist>

      <para>As above for creating the model, here is a list of things to keep
      in mind about uv-mapping:</para>

      <itemizedlist>
        <listitem>
          <para>The exact process depends on your 3D modeler. Usually there
          are specific tutorials about uv-mapping for it.</para>
        </listitem>

        <listitem>
          <para>Depending on the complexity of your model and texture,
          uv-mapping can be a very time-consuming process that can take you as
          long or even longer than creating your model.</para>
        </listitem>

        <listitem>
          <para>UV-map as exact as possible. Small errors can be very visible
          and annoying in your finished object.</para>
        </listitem>

        <listitem>
          <para>The texture is tiled in texture space, so if you map over the
          rim of it, it starts again from the opposing side. This will lead to
          a visible seam if your texture isn't seamless.</para>
        </listitem>

        <listitem>
          <para>If you need more than one basic texture for your object, you
          can put them all into one texture bitmap and uv-map the parts of
          your model to the correct part of your texture. This is common
          practice.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Coordinate system</title>

      <para>As long as you are still in your 3D modeler you should take note
      which coordinate system it uses. We need two properties, which axis
      points up and its handedness. The first is easy, just have a look
      whether the x, y or z axis points up. The second is a bit more tricky. A
      coordinate system can be left or right-handed. Here is how to determine
      the handedness:</para>

      <note>
        <para>Using your right hand, point the thumb in the direction of the
        x-axis and your index finger in the direction of the y-axis (They
        should form a <quote>playing pistol</quote> or <quote>Five glasses of
        beer for the sawmill guys</quote> gesture). If you now can point your
        middle finger in the direction of the z-axis without hurting yourself
        (or over bending if you're flexible enough :-) ), it's a right-handed
        coordinate system.</para>
      </note>

      <para>In most cases you get a right-handed coordinate system.</para>
    </section>

    <section>
      <title>Converting the model</title>

      <para>The importer only supports loading ASE and MS3D files at the
      moment. If you can directly save or export to one of these formats, do
      so and skip this section. If not, you need to convert your model to ASE.
      The free converter of choice is <ulink
      url="http://mirex.mypage.sk/index.php?selected=1">Biturn</ulink>. Get it
      and convert you model to ASE (3ds max ascii) format. It's not
      recommended to convert to ms3d format as biturn is known to do strange
      coordinate system conversions when converting from ms3d, no one knows
      what it will do if you convert to ms3d.</para>
    </section>

    <section>
      <title>Getting and installing the importer</title>

      <para>Maybe you already did this, if not, get the importer form the
      <ulink url="http://rct3.sourceforge.net">home page on
      sourceforge</ulink>. It is distributed as a zip file, put the contents
      into a directory of your choice. Updates should go into the same
      directory as some settings are stored inside a small file in this
      directory. Always make sure you overwrite all files when you
      update.</para>
    </section>

    <section>
      <title>A few notes on OVL files</title>

      <para>The OVL file format has been designed for RCT3 by Frontier. You
      don't have to know everything about their internals, but there are a few
      things you have to know:</para>

      <itemizedlist>
        <listitem>
          <para>You <emphasis>may not</emphasis> change the name of an OVL
          file in the Windows Explorer. If you want to change the name you
          need to recreate it (see below).</para>
        </listitem>

        <listitem>
          <para>You <emphasis>may not</emphasis> change the name of any
          directory of your installed theme. If you want to change them you
          need to change the respective setting in the importer and
          reinstall.</para>
        </listitem>

        <listitem>
          <para>If you changed any file or directory name you have to delete
          any previously installed old version of your theme from Style/Themed
          (see below).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Importing your first object</title>

    <para>At this point you should have installed the importer and prepared
    all necessary files (model, texture bitmap and icon bitmap).</para>

    <section>
      <title>Primary setup</title>

      <para>After starting the importer you'll see the main window of the
      importer:</para>

      <figure>
        <title>RCT3 Custom Scenery Importer, Main Window</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="main.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The first thing you should decide is which theme type you want to
      give your set (1). This influences where it appears when a user filters
      the scenery by theme (the buttons at the top of the scenery menus). Note
      that the last four types only work if the user has Soaked! or Wild!
      installed.</para>

      <para>The next thing to decide is the prefix (2). This will be prepended
      to scenery ovl names and the set directory. It should identify you as
      the creator, so set it to your screen name or to an abbreviated form of
      it. You should also end it with a separator of some kind, recommended is
      a <quote>-</quote>. At this point you can also save this prefix, choose
      File-&gt;Save Default Prefix from the menu. If you do this you won't
      have to repeat this step for you next theme.</para>

      <important>
        <para>You can leave the prefix empty, but it is not recommended to do
        so. Scenery OVL names have to be unique, so if you don't set it and
        someone else publishes a custom scenery set that contains an object
        with the same name these will conflict. Using a unique prefix prevents
        that (or at least makes it rather unlikely).</para>
      </important>

      <para>Now enter the name for your theme (3). Together with the prefix
      this will form the name of the directory in Style\Themed where your set
      will be installed to. It is <emphasis>not</emphasis> displayed to the
      user in the game.</para>

      <note>
        <para>You can only use ASCII characters for the prefix and theme name.
        This is enforced as people with different international Windows
        versions may have trouble using your theme otherwise.</para>
      </note>
    </section>

    <section id="sect22">
      <title>Create a scenery ovl</title>

      <para>Now it's time to create the first scenery ovl, so press the
      <quote>Create Scenery OVL</quote> button (7) in the main window. This
      will open the Create Scenery OVL window:</para>

      <figure>
        <title>RCT3 Custom Scenery Importer, Create Scenery OVL Window</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="createscenery.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Before continuing with the creation process let's take a look at
      how lists work in this window (and windows you open form it). All lists
      have a common interface. Some specific lists may lack certain elements
      or have more, but basically they all work the same. For example take a
      look at the texture list (4). At the top you can find an up/down control
      that allows you to change the order of the items. Below it there's a
      group of buttons that allow you to add a new item (<quote>+</quote>),
      edit it (<quote>E</quote>), copy it (<quote>C</quote>) or delete it
      (<quote>-</quote>). The flat <quote>C</quote> button will delete the
      whole list. Double-clicking on a list entry will usually perform the
      same action as selecting it and pressing the <quote>E</quote> edit
      button. Don't worry, all buttons will show a short help text when you
      hover the mouse cursor over them for a bit :-)</para>

      <para>Now lets start.</para>

      <section>
        <title>Add the texture</title>

        <para>First you have to add your model texture, so press the add
        button (<quote>+</quote>) in the texture list (4). This will open a
        file selection window, so go on and select your texture bitmap file
        and press <quote>Ok</quote>. You will then get the <quote>Add
        Texture</quote> window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Add Texture Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="texture.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The texture name (a) and file name (b) should be filled with the
        name and path to the texture file you chose. Basically there is
        nothing you need to change, although you can change the Texture Name
        (a) if you want to. When you're finished, press Ok (c). If you get an
        error message this usually means that something is wrong with your
        texture bitmap (review <xref linkend="sect13" />). Fix the problem and
        press Ok (c) again. If you need to change the file, press the Open
        button in (6) and select the correct one.</para>

        <note>
          <para>If you press <quote>Cancel</quote> in the first file selection
          window or try to edit the texture later you get the Advanced Texture
          Settings window. This is not covered here. If you can't figure it
          out, simply delete and re add the texture.</para>
        </note>

        <para>After adding the texture it appears in the list (4).</para>
      </section>

      <section>
        <title>Add the model</title>

        <para>Back in the Create Scenery OVL window, press the add button
        (<quote>+</quote>) in the model list (5). You will get the Model
        Settings window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Model Settings Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="model.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>First, press the Open button (b) and select your model file. If
        you get an error, review <xref linkend="sect12" /> and/or <xref
        linkend="sect14" />. Before continuing, have a look at the mesh list
        (e). If there are only dark red (maroon) entries, you probably forgot
        to uv-map the model (review <xref linkend="sect14" />). After opening
        the file, the name (a) will be pre-filled based on the model file
        name, you can change it if you want.</para>

        <para>Now it's time to setup the model transformation matrix that will
        convert the model from the coordinate system your modeler uses to the
        one RCT3 uses. Use this table to find out which matrix is
        needed:</para>

        <informaltable>
          <tgroup cols="3">
            <tbody>
              <row>
                <entry>Coordinate System</entry>

                <entry>Modeler</entry>

                <entry>Matrix</entry>
              </row>

              <row>
                <entry>Left-handed, Y-up</entry>

                <entry>Some 3DStudio/3DS max versions</entry>

                <entry>(none)</entry>
              </row>

              <row>
                <entry>Right-handed, Z-up</entry>

                <entry>Most 3d modelers (e.g. Blender)</entry>

                <entry>Fix Orientation</entry>
              </row>

              <row>
                <entry>Right-handed, Y-up</entry>

                <entry>MilkShape</entry>

                <entry>MirrorZ <emphasis role="bold">(Automatically set since
                v16fix5)</emphasis></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>If you need a transformation matrix, press the Edit button (c)
        to open the Matrix Editor and press the button name in the table
        above. Close the editor by pressing the <quote>Ok</quote> button. Back
        in the Model Settings window you can now press the Save Default button
        (d). The transformation matrix you chose will then be applied to every
        new model you add, so you won't have to repeat this step.</para>

        <para>The next step is to assign the model texture to your mesh.
        Usually you should have only one for your first object. If you used
        Biturn to convert your model there will be an additional mesh called
        <quote>root</quote>, just ignore it.</para>

        <para>Double-click the mesh (which currently should be bright red) you
        want to assign a texture to (or select it and press the <quote>Edit
        Mesh Settings</quote> button). You will get the Mesh Settings
        window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Mesh Settings Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="mesh.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Select the model texture from the drop-down list (A). If your
        object has more than one mesh that should get the same settings, check
        <quote>Apply to All Meshes</quote> (C). When you're finished, press Ok
        (C).</para>

        <para>We are now finished setting up the model, so back in the Model
        Settings window close it by pressing Ok (f).</para>
      </section>

      <section>
        <title>Set up Levels of Detail (LODs)</title>

        <para>Fortunately for your first object this step is very easy, just
        press the <quote>A</quote> button in the LOD list (6). This will add
        three default levels of detail that use the model you just
        added.</para>
      </section>

      <section>
        <title>Save and Create</title>

        <para>Now everything is set up. First, press the save as button (2)
        and save the settings for your object to a scn file. Now press the
        Create button (7) which should now be enabled and say <quote>Create
        Scenery OVL</quote> if you did everything correctly.</para>

        <para>Select the filename you want to save the ovl to, do not enter
        any file extension and keep the prefix in the name. You also may only
        use ASCII characters for it. As already mentioned, if you later decide
        that you want to rename the ovl file you need to repeat this step,
        just renaming it in the Windows Explorer will <emphasis>not</emphasis>
        work. After a short while you should get a message that the ovl was
        created successfully. If not, you didn't follow the instructions above
        (or did something unexpected).</para>

        <para>After successfully creating the ovl, press the save button (1)
        to save your scn file again (this will store the path of the ovl file
        you just created so you don't have to enter it again when you need to
        recreate it).</para>

        <para>You're now finished creating your first scenery ovl. Press the
        exit button (3) to go back to the main window.</para>
      </section>
    </section>

    <section>
      <title>Create the theme</title>

      <para>Back in the main window we'll now add an icon texture, icon
      references, text strings and the scenery item.</para>

      <section>
        <title>Add the icon texture</title>

        <para>Press the <quote>Icon Textures</quote> button (6) to get to the
        Icon Texture Management window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Management Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="manager.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>As essentially all management windows look the same, no more
          screen shots will be shown.</para>
        </note>

        <para>Now press the <quote>Add</quote> button to get to the Icon
        Texture window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Icon Texture Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="icontexture.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Press the Load Texture button (b) and select your icon texture.
        As with the model texture, the name (a) will be filled in
        automatically, but you can change it if you want. Press Ok (c) when
        finished and close the management window.</para>

        <note>
          <para>As the management window implies you are not restricted to
          only one icon texture, so if you want to create a really large set
          you can add more later.</para>
        </note>
      </section>

      <section>
        <title>Add icon references</title>

        <para>Back in the main window press the Icon References button (9) to
        get to the Icon Reference Manager. Icon references are needed to tell
        RCT3 where on the icon texture the individual icons are placed. We
        will go the easy way, so just press the <quote>Auto</quote> button,
        leave your icon texture selected in the window that pops up and press
        <quote>Ok</quote>. This will add references for all icons as described
        above (<xref linkend="sect13" />). Now close the management
        window.</para>
      </section>

      <section>
        <title>Add text strings</title>

        <para>Text strings represent the menu text entries the user will see
        in the game. Open the Text String Management window (8) and press the
        <quote>Add</quote> button:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Text String Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="text.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The only thing you need to enter is the text you want to present
        to the user (b). You can also enter a name (a), but if you leave that
        box empty the text will be copied over when you close the window. Now
        enter a group (sub menu) name for your theme, probably the theme name
        and your screen name in some combination. A good idea is either to put
        your name in front (<quote>xyz's abc set</quote>) or last (<quote>abc
        set (xyz)</quote>). Personally I prefer the latter as I tend to
        remember the set name but not who exactly made it.</para>

        <note>
          <para>You can also make scenery items without a group, but this is
          not recommended. They will appear in the big list with all the
          original game items and most likely be missed by the users. Also
          this list is already too big with both extensions installed, so
          please don't make it longer than necessary.</para>
        </note>

        <para>After entering the menu text for the group, close the window by
        pressing Ok (c).</para>

        <para>Back in the manager add another text string for your scenery
        object. The process is the same. When you're finished, close the Text
        String Management window.</para>
      </section>

      <section>
        <title>Add your scenery item</title>

        <para>Open the Scenery Item Management window by pressing the
        respective button (5). After pressing <quote>Add</quote> you get the
        Scenery Item Settings window:</para>

        <figure>
          <title>RCT3 Custom Scenery Importer, Scenery Item Settings
          Window</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="scenery.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>First, press the Select OVL button (a) and select the ovl you
        created above (<xref linkend="sect22" />). Next enter a location (b).
        This is the subdirectory of your installed theme the ovl will be
        placed in. If you can't think of something better, use
        <quote>misc</quote>. When you add more items to your set later, you
        can use the drop-down list to select locations you used before. As
        this translates directly into a directory, only ASCII characters are
        allowed.</para>

        <para>If you don't want to use a group you have to disable it using
        the check box (c), but as mentioned above this is not recommended.
        Otherwise select an icon reference (d) and text string (e) for the
        group. You have to do the same for your scenery item in (f) and
        (g).</para>

        <para>Next set how much the item will cost and the refund (j).
        Actually the latter is a misnomer, it is the cost of removing the
        item, so if you want a real refund, enter a negative value. The values
        you enter here are measured in the smallest unit of the users
        configured currency (e.g. cents for Dollars or Euros).</para>

        <para>The scenery type (k) selects in which menu and category the item
        will appear. For your first item, select <quote>Small Scenery</quote>.
        Leave the support type (l) at <quote>None</quote> and set extra
        parameters (m) to <quote>none</quote> as well.</para>

        <para>All position parameters (n) should be set to 0 (zero), the size
        in squares (p) both to 1. The size (o) should be set to the size of
        your model in modeler units. You have to keep in mind in this case
        that x/y/z here refer to the game's coordinate system. This doesn't
        matter if you didn't need a model transformation matrix or use
        MilkShape. If you had to use the <quote>Fix Orientation</quote> matrix
        you need to shift the values <quote>one up</quote>, so the size in the
        x direction in your modeler goes into z, y into x and z into y.</para>

        <para>The size flag (q) is rather a positioning type flag. For your
        first object, select <quote>Full Tile</quote>. If you want to know
        more about this setting and how you need to position your model
        correctly for them, see <ulink
        url="http://belgabor.vodhin.net/facts">Belgabor's facts &amp; figures
        page</ulink>.</para>

        <para>We don't need to go into detail for the unknowns (r), not much
        is known about them anyways. Set Unknown1 and 2 to unknown1 and enter
        0 (zero) for all others. Leave the flags alone.</para>

        <note>
          <para>You can use the Save SID as button (i) to save the Scenery
          Options (with the exception of Cost, Refund and Supports Type),
          Unknowns and Flags to a file for later reference (e.g. when you want
          to create several items with the same settings). You can open these
          files with the Open SID button (h). There is also a library of sid
          files dumped form game objects on <ulink
          url="http://www.sebar.com/jonwil">jonwil's page</ulink>.</para>
        </note>

        <para>You're finished here, so press Ok (s) to close the window. Also
        close the Scenery Item Management window.</para>
      </section>
    </section>

    <section>
      <title>Save and install the theme</title>

      <para>Now we nearly made it. Choose File-&gt;Save Theme File from the
      menu of the main window to save your theme file. Now press the Install
      button (4) to install it. It will be saved to &lt;RCT3 Installation
      Directory&gt;\Style\Themed into a subdirectory called PrefixThemename.
      If you don't have RCT3 installed, you will be able to select a directory
      to install to instead of &lt;RCT3 Installation
      Directory&gt;\Style\Themed.</para>

      <para>Now start RCT3 and test if everything went well.</para>

      <para><emphasis role="bold">Congratulations, you now have imported your
      first RCT3 custom scenery object =)</emphasis></para>
    </section>
  </section>

  <section>
    <title>Credits</title>

    <itemizedlist>
      <listitem>
        <para>The docbook css used for the html version of this document is
        based upon the one created by <ulink
        url="http://www.karakas-online.de">Chris Karakas</ulink>.</para>
      </listitem>

      <listitem>
        <para>This CSS stylesheet uses <ulink
        url="http://www.matterform.com/qbullets/index.php">QBullets</ulink> in
        links. Thanks to Matterform Media for providing QBullets for free. If
        you plan to use them on your website, please observe the <ulink
        url="http://www.matterform.com/qbullets/usage.html">QBullets usage
        terms</ulink>.</para>
      </listitem>
    </itemizedlist>

    <para role="matterform"><ulink
    url="http://www.matterform.com/"><inlinemediaobject>
        <imageobject>
          <imagedata fileref="images/qb_credit.gif" scale="100" scalefit="0" />
        </imageobject>
      </inlinemediaobject></ulink></para>

    <para><ulink url="http://sourceforge.net/"><inlinemediaobject>
        <imageobject role="html">
          <imagedata fileref="http://sourceforge.net/sflogo.php?group_id=181524&amp;type=4" />
        </imageobject>

        <imageobject role="pdf">
          <imagedata fileref="images/sflogo.png" />
        </imageobject>

        <imageobject role="chm">
          <imagedata fileref="images/sflogo.png" />
        </imageobject>
      </inlinemediaobject></ulink></para>
  </section>
</article>